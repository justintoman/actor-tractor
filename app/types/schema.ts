/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/certification/movie/list': {
    /** Get an up to date list of the officially supported movie certifications on TMDB. */
    get: operations['GET_certification-movie-list'];
  };
  '/tv/{tv_id}/watch/providers': {
    /**
     * Powered by our partnership with JustWatch, you can query this method to get a list of the availabilities per country by provider.
     *
     * This is **not** going to return full deep links, but rather, it's just enough information to display what's available where.
     *
     * You can link to the provided TMDB URL to help support TMDB and provide the actual deep links to the content.
     *
     * **Please note**: In order to use this data **you must** attribute the source of the data as JustWatch. If we find any usage not complying with these terms we will revoke access to the API.
     */
    get: operations['GET_tv-tv_id-watch-providers'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/movie/popular': {
    /** Get a list of the current popular movies on TMDB. This list updates daily. */
    get: operations['GET_movie-popular'];
  };
  '/person/{person_id}/changes': {
    /**
     * Get the changes for a person. By default only the last 24 hours are returned.
     *
     * You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
     */
    get: operations['GET_person-person_id-changes'];
    parameters: {
      path: {
        person_id: number;
      };
    };
  };
  '/movie/{movie_id}/images': {
    /**
     * Get the images that belong to a movie.
     *
     * Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
     */
    get: operations['GET_movie-movie_id-images'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/authentication/session/convert/4': {
    /** Use this method to create a v3 session ID if you already have a valid v4 access token. The v4 token needs to be authenticated by the user. Your standard "read token" will not validate to create a session ID. */
    post: operations['POST_authentication-session-convert-4'];
  };
  '/watch/providers/tv': {
    /** Returns a list of the watch provider (OTT/streaming) data we have available for TV series. You can specify a `watch_region` param if you want to further filter the list by country. */
    get: operations['GET_watch-providers-tv'];
  };
  '/list': {
    /** Create a list. */
    post: operations['POST_list'];
  };
  '/movie/{movie_id}/lists': {
    /** Get a list of lists that this movie belongs to. */
    get: operations['GET_movie-movie_id-lists'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/tv/airing_today': {
    /**
     * Get a list of TV shows that are airing today. This query is purely day based as we do not currently support airing times.
     *
     * You can specify a [timezone](endpoint:KQ4CDdEoWKJYLkrhS) to offset the day calculation. Without a specified timezone, this query defaults to EST (Eastern Time UTC-05:00).
     */
    get: operations['GET_tv-airing_today'];
  };
  '/person/popular': {
    /** Get the list of popular people on TMDB. This list updates daily. */
    get: operations['GET_person-popular'];
  };
  '/tv/{tv_id}/rating': {
    /**
     * Rate a TV show.
     *
     * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     */
    post: operations['POST_tv-tv_id-rating'];
    /**
     * Remove your rating for a TV show.
     *
     * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     */
    delete: operations['DELETE_tv-tv_id-rating'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/company/{company_id}': {
    /** Get a companies details by id. */
    get: operations['GET_company-company_id'];
    parameters: {
      path: {
        company_id: number;
      };
    };
  };
  '/movie/{movie_id}/external_ids': {
    /**
     * Get the external ids for a movie. We currently support the following external sources.
     *
     * | **Media Databases** | **Social IDs** |
     * | ------------------- | -------------- |
     * | IMDb ID             | Facebook       |
     * |                     | Instagram      |
     * |                     | Twitter        |
     */
    get: operations['GET_movie-movie_id-external_ids'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/discover/movie': {
    /**
     * Discover movies by different types of data like average rating, number of votes, genres and certifications. You can get a valid list of certifications from the [certifications list](#endpoint:faFKjuKG2HnwexAWM) method.
     *
     * Discover also supports a nice list of sort options. See below for all of the available options.
     *
     * Please note, when using `certification` \ `certification.lte` you must also specify `certification_country`. These two parameters work together in order to filter the results. You can only filter results with the countries we have added to our [certifications list](#endpoint:faFKjuKG2HnwexAWM).
     *
     * If you specify the `region` parameter, the regional release date will be used instead of the primary release date. The date returned will be the first date based on your query (ie. if a `with_release_type` is specified). It's important to note the order of the release types that are used. Specifying "2|3" would return the limited theatrical release date as opposed to "3|2" which would return the theatrical date.
     *
     * Also note that a number of filters support being comma (`,`) or pipe (`|`) separated. Comma's are treated like an `AND` and query while pipe's are an `OR`.
     *
     * Some examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | November 18, 2021 | A new `without_companies` filter is available.|
     * | April 13, 2021 | A new `with_watch_monetization_types` filter is available to use with `watch_region`.|
     * | January 2, 2021 | A new set of filters are available for watch provider filtering. Check out `with_watch_providers` and `watch_region`.|
     */
    get: operations['GET_discover-movie'];
  };
  '/search/keyword': {
    /** Search for keywords. */
    get: operations['GET_search-keyword'];
  };
  '/movie/{movie_id}/translations': {
    /** Get a list of translations that have been created for a movie. */
    get: operations['GET_movie-movie_id-translations'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/list/{list_id}/clear': {
    /** Clear all of the items from a list. */
    post: operations['POST_list-list_id-clear'];
    parameters: {
      path: {
        list_id: string;
      };
    };
  };
  '/tv/{tv_id}/season/{season_number}/episode/{episode_number}/account_states': {
    /** Get your rating for a episode. */
    get: operations['GET_tv-tv_id-season-season_number-episode-episode_number-account_states'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
  };
  '/person/{person_id}/combined_credits': {
    /** Get the movie and TV credits together in a single response. */
    get: operations['GET_person-person_id-combined_credits'];
    parameters: {
      path: {
        person_id: number;
      };
    };
  };
  '/tv/{tv_id}/season/{season_number}/episode/{episode_number}/videos': {
    /**
     * Get the videos that have been added to a TV episode.
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
     * | March 23, 2019 | Vimeo was added as a video source. |
     * | March 20, 2019 | "Behind the Scenes", "Bloopers" and "Recap" were added as valid video types. |
     */
    get: operations['GET_tv-tv_id-season-season_number-episode-episode_number-videos'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
  };
  '/tv/{tv_id}/season/{season_number}/episode/{episode_number}': {
    /**
     * Get the TV episode details by id.
     *
     * Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | June 1, 2018 | Added the [translations](#endpoint:5SFwZar3LkP99QMp7) method. |
     */
    get: operations['GET_tv-tv_id-season-season_number-episode-episode_number'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
  };
  '/movie/{movie_id}/videos': {
    /**
     * Get the videos that have been added to a movie.
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
     * | March 23, 2019 | Vimeo was added as a video source. |
     * | March 20, 2019 | "Behind the Scenes" and "Bloopers" were added as valid video types. |
     */
    get: operations['GET_movie-movie_id-videos'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/guest_session/{guest_session_id}/rated/tv/episodes': {
    /** Get the rated TV episodes for a guest session. */
    get: operations['GET_guest_session-guest_session_id-rated-tv-episodes'];
    parameters: {
      path: {
        guest_session_id: string;
      };
    };
  };
  '/tv/{tv_id}/content_ratings': {
    /** Get the list of content ratings (certifications) that have been added to a TV show. */
    get: operations['GET_tv-tv_id-content_ratings'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/search/company': {
    /** Search for companies. */
    get: operations['GET_search-company'];
  };
  '/keyword/{keyword_id}': {
    get: operations['GET_keyword-keyword_id'];
    parameters: {
      path: {
        keyword_id: number;
      };
    };
  };
  '/tv/{tv_id}/reviews': {
    /** Get the reviews for a TV show. */
    get: operations['GET_tv-tv_id-reviews'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/collection/{collection_id}': {
    /**
     * Get collection details by id.
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |
     */
    get: operations['GET_collection-collection_id'];
    parameters: {
      path: {
        collection_id: number;
      };
    };
  };
  '/guest_session/{guest_session_id}/rated/movies': {
    /** Get the rated movies for a guest session. */
    get: operations['GET_guest_session-guest_session_id-rated-movies'];
    parameters: {
      path: {
        guest_session_id: string;
      };
    };
  };
  '/tv/{tv_id}/images': {
    /**
     * Get the images that belong to a TV show.
     *
     * Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
     */
    get: operations['GET_tv-tv_id-images'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/authentication/session/new': {
    /** You can use this method to create a fully valid session ID once a user has validated the request token. More information about how this works can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ). */
    post: operations['POST_authentication-session-new'];
  };
  '/person/{person_id}/movie_credits': {
    /** Get the movie credits for a person. */
    get: operations['GET_person-person_id-movie_credits'];
    parameters: {
      path: {
        person_id: number;
      };
    };
  };
  '/authentication/token/validate_with_login': {
    /**
     * This method allows an application to validate a request token by entering a username and password.
     *
     * Not all applications have access to a web view so this can be used as a substitute.
     *
     * Please note, the preferred method of validating a request token is to have a user authenticate the request via the TMDB website. You can read about that method [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     *
     * If you decide to use this method please **use HTTPS**.
     */
    post: operations['POST_authentication-token-validate_with_login'];
  };
  '/tv/{tv_id}/credits': {
    /** Get the credits (cast and crew) that have been added to a TV show. */
    get: operations['GET_tv-tv_id-credits'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/person/{person_id}': {
    /**
     * Get the primary person details by id.
     *
     * Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | July 17, 2018 | Added the `known_for_department` field. |
     * | April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |
     * | November 9, 2016 | Biographies are now translatable on TMDB. This means you can query person details with a language parameter. |
     */
    get: operations['GET_person-person_id'];
    parameters: {
      path: {
        person_id: number;
      };
    };
  };
  '/network/{network_id}/images': {
    /**
     * Get the TV network logos by id.
     *
     * There are two image formats that are supported for networks, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.
     *
     * For more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).
     */
    get: operations['GET_network-network_id-images'];
    parameters: {
      path: {
        network_id: number;
      };
    };
  };
  '/account/{account_id}/rated/movies': {
    /** Get a list of all the movies you have rated. */
    get: operations['GET_account-account_id-rated-movies'];
    parameters: {
      path: {
        account_id: number;
      };
    };
  };
  '/tv/{tv_id}/changes': {
    /**
     * Get the changes for a TV show. By default only the last 24 hours are returned.
     *
     * You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
     *
     * TV show changes are different than movie changes in that there are some edits on seasons and episodes that will create a change entry at the show level. These can be found under the season and episode keys. These keys will contain a `series_id` and `episode_id`. You can use the [season changes](#endpoint:ZqhtyQbJ4YXz8RSya) and [episode changes](#endpoint:FpqrhBzgf2RJv4bHC) methods to look these up individually.
     */
    get: operations['GET_tv-tv_id-changes'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/discover/tv': {
    /**
     * Discover TV shows by different types of data like average rating, number of votes, genres, the network they aired on and air dates.
     *
     * Discover also supports a nice list of sort options. See below for all of the available options.
     *
     * Also note that a number of filters support being comma (`,`) or pipe (`|`) separated. Comma's are treated like an `AND` and query while pipe's are an `OR`.
     *
     * Some examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | November 18, 2021 | Some new filters are available: `with_status`, `with_type` and `without_companies`.|
     * | April 13, 2021 | A new `with_watch_monetization_types` filter is available to use with `watch_region`.|
     * | January 2, 2021 | A new set of filters are available for watch provider filtering. Check out `with_watch_providers` and `watch_region`.|
     */
    get: operations['GET_discover-tv'];
  };
  '/search/person': {
    /** Search for people. */
    get: operations['GET_search-person'];
  };
  '/tv/{tv_id}/season/{season_number}/credits': {
    /** Get the credits for TV season. */
    get: operations['GET_tv-tv_id-season-season_number-credits'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
  };
  '/list/{list_id}': {
    /** Get the details of a list. */
    get: operations['GET_list-list_id'];
    /** Delete a list. */
    delete: operations['DELETE_list-list_id'];
    parameters: {
      path: {
        list_id: string;
      };
    };
  };
  '/genre/tv/list': {
    /** Get the list of official genres for TV shows. */
    get: operations['GET_genre-tv-list'];
  };
  '/tv/{tv_id}/season/{season_number}/episode/{episode_number}/translations': {
    /** Get the translation data for an episode. */
    get: operations['GET_tv-tv_id-season-season_number-episode-episode_number-translations'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
  };
  '/authentication/guest_session/new': {
    /**
     * This method will let you create a new guest session. Guest sessions are a type of session that will let a user rate movies and TV shows but not require them to have a TMDB user account. More information about user authentication can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     *
     * Please note, you should only generate a single guest session per user (or device) as you will be able to attach the ratings to a TMDB user account in the future. There is also IP limits in place so you should always make sure it's the end user doing the guest session actions.
     *
     * If a guest session is not used for the first time within 24 hours, it will be automatically deleted.
     */
    get: operations['GET_authentication-guest_session-new'];
  };
  '/search/movie': {
    /** Search for movies. */
    get: operations['GET_search-movie'];
  };
  '/tv/{tv_id}/season/{season_number}': {
    /**
     * Get the TV season details by id.
     *
     * Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
     */
    get: operations['GET_tv-tv_id-season-season_number'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
  };
  '/search/multi': {
    /** Search multiple models in a single request. Multi search currently supports searching for movies, tv shows and people in a single request. */
    get: operations['GET_search-multi'];
  };
  '/movie/{movie_id}/alternative_titles': {
    /**
     * Get all of the alternative titles for a movie.
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | March 16, 2018 | Added the `type` field. |
     */
    get: operations['GET_movie-movie_id-alternative_titles'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/certification/tv/list': {
    /** Get an up to date list of the officially supported TV show certifications on TMDB. */
    get: operations['GET_certification-tv-list'];
  };
  '/tv/on_the_air': {
    /**
     * Get a list of shows that are currently on the air.
     *
     * This query looks for any TV show that has an episode with an air date in the next 7 days.
     */
    get: operations['GET_tv-on_the_air'];
  };
  '/movie/top_rated': {
    /** Get the top rated movies on TMDB. */
    get: operations['GET_movie-top_rated'];
  };
  '/configuration': {
    /**
     * Get the system wide configuration information. Some elements of the API require some knowledge of this configuration data. The purpose of this is to try and keep the actual API responses as light as possible. It is recommended you cache this data within your application and check for updates every few days.
     *
     * This method currently holds the data relevant to building image URLs as well as the change key map.
     *
     * To build an image URL, you will need 3 pieces of data. The `base_url`, `size` and `file_path`. Simply combine them all and you will have a fully qualified URL. Here’s an example URL:
     *
     *     https://image.tmdb.org/t/p/w500/8uO0gUM8aNqYLs1OsTBQiXu0fEv.jpg
     *
     * The configuration method also contains the list of change keys which can be useful if you are building an app that consumes data from the change feed.
     */
    get: operations['GET_configuration'];
  };
  '/search/collection': {
    /** Search for collections. */
    get: operations['GET_search-collection'];
  };
  '/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images': {
    /**
     * Get the images that belong to a TV episode.
     *
     * Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
     */
    get: operations['GET_tv-tv_id-season-season_number-episode-episode_number-images'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
  };
  '/movie/{movie_id}/similar': {
    /**
     * Get a list of similar movies. This is **not** the same as the "Recommendation" system you see on the website.
     *
     * These items are assembled by looking at keywords and genres.
     */
    get: operations['GET_movie-movie_id-similar'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/account/{account_id}/watchlist/movies': {
    /** Get a list of all the movies you have added to your watchlist. */
    get: operations['GET_account-account_id-watchlist-movies'];
    parameters: {
      path: {
        account_id: number;
      };
    };
  };
  '/movie/{movie_id}/reviews': {
    /** Get the user reviews for a movie. */
    get: operations['GET_movie-movie_id-reviews'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/collection/{collection_id}/images': {
    /** Get the images for a collection by id. */
    get: operations['GET_collection-collection_id-images'];
    parameters: {
      path: {
        collection_id: number;
      };
    };
  };
  '/person/changes': {
    /**
     * Get a list of all of the person ids that have been changed in the past 24 hours.
     *
     * You can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.
     */
    get: operations['GET_person-changes'];
  };
  '/tv/{tv_id}/episode_groups': {
    /** Get all of the episode groups that have been created for a TV show. With a group ID you can call the [get TV episode group details](#endpoint:yCouThc88qs7DGHY5) method. */
    get: operations['GET_tv-tv_id-episode_groups'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/credit/{credit_id}': {
    /**
     * Get a movie or TV credit details by id.
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | July 13, 2018 | Movie credits are now supported. |
     */
    get: operations['GET_credit-credit_id'];
    parameters: {
      path: {
        credit_id: string;
      };
    };
  };
  '/tv/{tv_id}/season/{season_number}/episode/{episode_number}/rating': {
    /**
     * Rate a TV episode.
     *
     * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     */
    post: operations['POST_tv-tv_id-season-season_number-episode-episode_number-rating'];
    /**
     * Remove your rating for a TV episode.
     *
     * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     */
    delete: operations['DELETE_tv-tv_id-season-season_number-episode-episode_number-rating'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
  };
  '/authentication/session': {
    /** If you would like to delete (or "logout") from a session, call this method with a valid session ID. */
    delete: operations['DELETE_authentication-session'];
  };
  '/tv/top_rated': {
    /** Get a list of the top rated TV shows on TMDB. */
    get: operations['GET_tv-top_rated'];
  };
  '/list/{list_id}/add_item': {
    /** Add a movie to a list. */
    post: operations['POST_list-list_id-add_item'];
    parameters: {
      path: {
        list_id: string;
      };
    };
  };
  '/account/{account_id}/favorite/movies': {
    /** Get the list of your favorite movies. */
    get: operations['GET_account-account_id-favorite-movies'];
    parameters: {
      path: {
        account_id: number;
      };
    };
  };
  '/person/{person_id}/tagged_images': {
    /** Get the images that this person has been tagged in. */
    get: operations['GET_person-person_id-tagged_images'];
    parameters: {
      path: {
        person_id: number;
      };
    };
  };
  '/tv/popular': {
    /** Get a list of the current popular TV shows on TMDB. This list updates daily. */
    get: operations['GET_tv-popular'];
  };
  '/account/{account_id}/rated/tv/episodes': {
    /** Get a list of all the TV episodes you have rated. */
    get: operations['GET_account-account_id-rated-tv-episodes'];
    parameters: {
      path: {
        account_id: string;
      };
    };
  };
  '/collection/{collection_id}/translations': {
    /** Get the list translations for a collection by id. */
    get: operations['GET_collection-collection_id-translations'];
    parameters: {
      path: {
        collection_id: number;
      };
    };
  };
  '/tv/episode_group/{id}': {
    /**
     * Get the details of a TV episode group. Groups support 7 different types which are enumerated as the following:
     *
     * 1. Original air date
     * 2. Absolute
     * 3. DVD
     * 4. Digital
     * 5. Story arc
     * 6. Production
     * 7. TV
     */
    get: operations['GET_tv-episode_group-id'];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  '/configuration/countries': {
    /** Get the list of countries (ISO 3166-1 tags) used throughout TMDB. */
    get: operations['GET_configuration-countries'];
  };
  '/configuration/timezones': {
    /** Get the list of timezones used throughout TMDB. */
    get: operations['GET_configuration-timezones'];
  };
  '/tv/{tv_id}/season/{season_number}/account_states': {
    /** Returns all of the user ratings for the season's episodes. */
    get: operations['GET_tv-tv_id-season-season_number-account_states'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
  };
  '/movie/{movie_id}/keywords': {
    /** Get the keywords that have been added to a movie. */
    get: operations['GET_movie-movie_id-keywords'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/tv/{tv_id}/external_ids': {
    /**
     * Get the external ids for a TV show. We currently support the following external sources.
     *
     * | **Media Databases** | **Social IDs** |
     * | ------------------- | -------------- |
     * | IMDb ID             | Facebook       |
     * | TVDB ID             | Instagram      |
     * | Freebase MID*       | Twitter        |
     * | Freebase ID*        |                |
     * | TVRage ID*          |                |
     *
     * *Defunct or no longer available as a service.
     */
    get: operations['GET_tv-tv_id-external_ids'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/account/{account_id}/favorite': {
    /** This method allows you to mark a movie or TV show as a favorite item. */
    post: operations['POST_account-account_id-favorite'];
    parameters: {
      path: {
        account_id: number;
      };
    };
  };
  '/tv/{tv_id}/season/{season_number}/images': {
    /**
     * Get the images that belong to a TV season.
     *
     * Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
     */
    get: operations['GET_tv-tv_id-season-season_number-images'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
  };
  '/movie/changes': {
    /**
     * Get  a list of all of the movie ids that have been changed in the past 24 hours.
     *
     * You can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.
     */
    get: operations['GET_movie-changes'];
  };
  '/configuration/jobs': {
    /** Get a list of the jobs and departments we use on TMDB. */
    get: operations['GET_configuration-jobs'];
  };
  '/account': {
    /** Get your account details. */
    get: operations['GET_account'];
  };
  '/tv/{tv_id}/account_states': {
    /**
     * Grab the following account states for a session:
     *
     * - TV show rating
     * - If it belongs to your watchlist
     * - If it belongs to your favourite list
     */
    get: operations['GET_tv-tv_id-account_states'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/tv/{tv_id}/translations': {
    /** Get a list of the translations that exist for a TV show. */
    get: operations['GET_tv-tv_id-translations'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/guest_session/{guest_session_id}/rated/tv': {
    /** Get the rated TV shows for a guest session. */
    get: operations['GET_guest_session-guest_session_id-rated-tv'];
    parameters: {
      path: {
        guest_session_id: string;
      };
    };
  };
  '/review/{review_id}': {
    /**
     * Retrieve the details of a movie or TV show review.
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | November 14, 2020 | A `author_details` field has been added to the default response, which includes an `avatar_path` and `rating` value. |
     */
    get: operations['GET_review-review_id'];
    parameters: {
      path: {
        review_id: string;
      };
    };
  };
  '/tv/{tv_id}/season/{season_number}/aggregate_credits': {
    /**
     * Get the aggregate credits for TV season.
     *
     * This call differs from the main `credits` call in that it does not only return the season credits, but rather is a view of all the cast & crew for all of the episodes belonging to a season.
     */
    get: operations['GET_tv-tv_id-season-season_number-aggregate_credits'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
  };
  '/company/{company_id}/images': {
    /**
     * Get a companies logos by id.
     *
     * There are two image formats that are supported for companies, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.
     *
     * For more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).
     */
    get: operations['GET_company-company_id-images'];
    parameters: {
      path: {
        company_id: number;
      };
    };
  };
  '/movie/{movie_id}/rating': {
    /**
     * Rate a movie.
     *
     * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     */
    post: operations['POST_movie-movie_id-rating'];
    /**
     * Remove your rating for a movie.
     *
     * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
     */
    delete: operations['DELETE_movie-movie_id-rating'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/tv/{tv_id}/videos': {
    /**
     * Get the videos that have been added to a TV show.
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
     * | March 23, 2019 | Vimeo was added as a video source. |
     * | March 20, 2019 | "Behind the Scenes" and "Bloopers" were added as valid video types. |
     */
    get: operations['GET_tv-tv_id-videos'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/account/{account_id}/favorite/tv': {
    /** Get the list of your favorite TV shows. */
    get: operations['GET_account-account_id-favorite-tv'];
    parameters: {
      path: {
        account_id: number;
      };
    };
  };
  '/account/{account_id}/watchlist': {
    /** Add a movie or TV show to your watchlist. */
    post: operations['POST_account-account_id-watchlist'];
    parameters: {
      path: {
        account_id: number;
      };
    };
  };
  '/movie/now_playing': {
    /**
     * Get a list of movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.
     *
     * You can optionally specify a `region` prameter which will narrow the search to only look for theatrical release dates within the specified country.
     */
    get: operations['GET_movie-now_playing'];
  };
  '/person/{person_id}/tv_credits': {
    /**
     * Get the TV show credits for a person.
     *
     * You can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).
     */
    get: operations['GET_person-person_id-tv_credits'];
    parameters: {
      path: {
        person_id: number;
      };
    };
  };
  '/tv/{tv_id}/season/{season_number}/translations': {
    /** Get the credits for TV season. */
    get: operations['GET_tv-tv_id-season-season_number-translations'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
  };
  '/tv/{tv_id}/season/{season_number}/external_ids': {
    /**
     * Get the external ids for a TV season. We currently support the following external sources.
     *
     * | **Media Databases** |
     * | ------------------- |
     * | TVDB ID             |
     * | Freebase MID*       |
     * | Freebase ID*        |
     * | TVRage ID*          |
     *
     * *Defunct or no longer available as a service.
     */
    get: operations['GET_tv-tv_id-season-season_number-external_ids'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
  };
  '/search/tv': {
    /** Search for a TV show. */
    get: operations['GET_search-tv'];
  };
  '/movie/{movie_id}/credits': {
    /** Get the cast and crew for a movie. */
    get: operations['GET_movie-movie_id-credits'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/person/{person_id}/translations': {
    /** Get a list of translations that have been created for a person. */
    get: operations['GET_person-person_id-translations'];
    parameters: {
      path: {
        person_id: number;
      };
    };
  };
  '/keyword/{keyword_id}/movies': {
    /**
     * Get the movies that belong to a keyword.
     *
     * We **highly recommend** using [movie discover](#endpoint:p5NyoR7dM842S8G9j) instead of this method as it is much more flexible.
     */
    get: operations['GET_keyword-keyword_id-movies'];
    parameters: {
      path: {
        keyword_id: number;
      };
    };
  };
  '/movie/{movie_id}/changes': {
    /**
     * Get the changes for a movie. By default only the last 24 hours are returned.
     *
     * You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
     */
    get: operations['GET_movie-movie_id-changes'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/tv/{tv_id}/alternative_titles': {
    /** Returns all of the alternative titles for a TV show. */
    get: operations['GET_tv-tv_id-alternative_titles'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/account/{account_id}/rated/tv': {
    /** Get a list of all the TV shows you have rated. */
    get: operations['GET_account-account_id-rated-tv'];
    parameters: {
      path: {
        account_id: number;
      };
    };
  };
  '/movie/{movie_id}/account_states': {
    /**
     * Grab the following account states for a session:
     *
     * - Movie rating
     * - If it belongs to your watchlist
     * - If it belongs to your favourite list
     */
    get: operations['GET_movie-movie_id-account_states'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/company/{company_id}/alternative_names': {
    /** Get the alternative names of a company. */
    get: operations['GET_company-company_id-alternative_names'];
    parameters: {
      path: {
        company_id: number;
      };
    };
  };
  '/tv/changes': {
    /**
     * Get a list of all of the TV show ids that have been changed in the past 24 hours.
     *
     * You can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.
     */
    get: operations['GET_tv-changes'];
  };
  '/tv/season/{season_id}/changes': {
    /**
     * Get the changes for a TV season. By default only the last 24 hours are returned.
     *
     * You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
     */
    get: operations['GET_tv-season-season_id-changes'];
    parameters: {
      path: {
        season_id: number;
      };
    };
  };
  '/configuration/languages': {
    /** Get the list of languages (ISO 639-1 tags) used throughout TMDB. */
    get: operations['GET_configuration-languages'];
  };
  '/movie/{movie_id}/recommendations': {
    /** Get a list of recommended movies for a movie. */
    get: operations['GET_movie-movie_id-recommendations'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/list/{list_id}/item_status': {
    /** You can use this method to check if a movie has already been added to the list. */
    get: operations['GET_list-list_id-item_status'];
    parameters: {
      path: {
        list_id: string;
      };
    };
  };
  '/watch/providers/movie': {
    /** Returns a list of the watch provider (OTT/streaming) data we have available for movies. You can specify a `watch_region` param if you want to further filter the list by country. */
    get: operations['GET_watch-providers-movie'];
  };
  '/authentication/token/new': {
    /** Create a temporary request token that can be used to validate a TMDB user login. More details about how this works can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ). */
    get: operations['GET_authentication-token-new'];
  };
  '/watch/providers/regions': {
    /** Returns a list of all of the countries we have watch provider (OTT/streaming) data for. */
    get: operations['GET_watch-providers-regions'];
  };
  '/movie/{movie_id}/release_dates': {
    /**
     * Get the release date along with the certification for a movie.
     *
     * Release dates support different types:
     *
     * 1. Premiere
     * 2. Theatrical (limited)
     * 3. Theatrical
     * 4. Digital
     * 5. Physical
     * 6. TV
     */
    get: operations['GET_movie-movie_id-release_dates'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/tv/{tv_id}/recommendations': {
    /** Get the list of TV show recommendations for this item. */
    get: operations['GET_tv-tv_id-recommendations'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/tv/latest': {
    /** Get the most newly created TV show. This is a live response and will continuously change. */
    get: operations['GET_tv-latest'];
  };
  '/tv/{tv_id}/season/{season_number}/videos': {
    /**
     * Get the videos that have been added to a TV season.
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
     * | March 23, 2019 | Vimeo was added as a video source. |
     * | March 20, 2019 | "Behind the Scenes" and "Bloopers" and "Recap" were added as valid video types. |
     */
    get: operations['GET_tv-tv_id-season-season_number-videos'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
  };
  '/tv/{tv_id}': {
    /**
     * Get the primary TV show details by id.
     *
     * Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | November 20, 2020 | A `watch/providers` method has been added to show what providers (eg. streaming) are available and where.|
     * | November 14, 2020 | The `tagline` has been added to the default response, and is also available as part of the translations method. |
     * | July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |
     * | March 12, 2018 | Networks return proper logos and we introduced SVG support. |
     * | March 8, 2018 | The `seasons` field now returns the translated names and overviews. |
     */
    get: operations['GET_tv-tv_id'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits': {
    /** Get the credits (cast, crew and guest stars) for a TV episode. */
    get: operations['GET_tv-tv_id-season-season_number-episode-episode_number-credits'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
  };
  '/person/{person_id}/external_ids': {
    /**
     * Get the external ids for a person. We currently support the following external sources.
     *
     * | **External Sources** |
     * | ------------     |
     * | IMDB ID          |
     * | Facebook         |
     * | Freebase MID     |
     * | Freebase ID      |
     * | Instagram        |
     * | TVRage ID        |
     * | Twitter          |
     */
    get: operations['GET_person-person_id-external_ids'];
    parameters: {
      path: {
        person_id: number;
      };
    };
  };
  '/tv/{tv_id}/aggregate_credits': {
    /**
     * Get the aggregate credits (cast and crew) that have been added to a TV show.
     *
     * This call differs from the main `credits` call in that it does not return the newest season but rather, is a view of all the entire cast & crew for all episodes belonging to a TV show.
     */
    get: operations['GET_tv-tv_id-aggregate_credits'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/movie/{movie_id}': {
    /**
     * Get the primary information about a movie.
     *
     * Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | November 20, 2020 | A `watch/providers` method has been added to show what providers (eg. streaming) are available and where.|
     */
    get: operations['GET_movie-movie_id'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/trending/{media_type}/{time_window}': {
    /**
     * Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.
     *
     * #### Valid Media Types
     *
     * | **Media Type** | **Description** |
     * | - | - |
     * | all | Include all movies, TV shows and people in the results as a global trending list. |
     * | movie | Show the trending movies in the results. |
     * | tv | Show the trending TV shows in the results. |
     * | person | Show the trending people in the results. |
     *
     * #### Valid Time Windows
     *
     * | **Time Window** | **Description** |
     * | - | - |
     * | day | View the trending list for the day. |
     * | week | View the trending list for the week. |
     */
    get: operations['GET_trending-media_type-time_window'];
    parameters: {
      path: {
        media_type: 'all' | 'movie' | 'tv' | 'person';
        time_window: 'day' | 'week';
      };
    };
  };
  '/network/{network_id}': {
    /**
     * Get the details of a network.
     *
     * #### Recent Changes
     *
     * | **Date** | **Change** |
     * | - | - |
     * | November 14, 2020 | The `logo_path` has been added to the default response. |
     */
    get: operations['GET_network-network_id'];
    parameters: {
      path: {
        network_id: number;
      };
    };
  };
  '/network/{network_id}/alternative_names': {
    /** Get the alternative names of a network. */
    get: operations['GET_network-network_id-alternative_names'];
    parameters: {
      path: {
        network_id: number;
      };
    };
  };
  '/person/latest': {
    /** Get the most newly created person. This is a live response and will continuously change. */
    get: operations['GET_person-latest'];
  };
  '/tv/{tv_id}/screened_theatrically': {
    /** Get a list of seasons or episodes that have been screened in a film festival or theatre. */
    get: operations['GET_tv-tv_id-screened_theatrically'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/account/{account_id}/watchlist/tv': {
    /** Get a list of all the TV shows you have added to your watchlist. */
    get: operations['GET_account-account_id-watchlist-tv'];
    parameters: {
      path: {
        account_id: number;
      };
    };
  };
  '/tv/{tv_id}/keywords': {
    /** Get the keywords that have been added to a TV show. */
    get: operations['GET_tv-tv_id-keywords'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
  '/movie/latest': {
    /** Get the most newly created movie. This is a live response and will continuously change. */
    get: operations['GET_movie-latest'];
  };
  '/configuration/primary_translations': {
    /**
     * Get a list of the _officially_ supported translations on TMDB.
     *
     * While it's technically possible to add a translation in any one of the [languages](#endpoint:tem8QfFFyAfWodrCv) we have added to TMDB (we don't restrict content), the ones listed in this method are the ones we also support for localizing the website with which means they are what we refer to as the "primary" translations.
     *
     * These are all specified as [IETF tags](https://en.wikipedia.org/wiki/IETF_language_tag) to identify the languages we use on TMDB. There is one exception which is image languages. They are currently only designated by a ISO-639-1 tag. This is a planned upgrade for the future.
     *
     * We're always open to adding more if you think one should be added. You can ask about getting a new primary translation added by posting on [the forums](https://www.themoviedb.org/talk/category/5047951f760ee3318900009a).
     *
     * One more thing to mention, these are the translations that map to our website translation project. You can view and contribute to that project [here](https://www.localeapp.com/projects/8267).
     */
    get: operations['GET_configuration-primary_translations'];
  };
  '/movie/upcoming': {
    /**
     * Get a list of upcoming movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.
     *
     * You can optionally specify a `region` prameter which will narrow the search to only look for theatrical release dates within the specified country.
     */
    get: operations['GET_movie-upcoming'];
  };
  '/tv/episode/{episode_id}/changes': {
    /**
     * Get the changes for a TV episode. By default only the last 24 hours are returned.
     *
     * You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
     */
    get: operations['GET_tv-episode-episode_id-changes'];
    parameters: {
      path: {
        episode_id: number;
      };
    };
  };
  '/movie/{movie_id}/watch/providers': {
    /**
     * Powered by our partnership with JustWatch, you can query this method to get a list of the availabilities per country by provider.
     *
     * This is **not** going to return full deep links, but rather, it's just enough information to display what's available where.
     *
     * You can link to the provided TMDB URL to help support TMDB and provide the actual deep links to the content.
     *
     * **Please note**: In order to use this data **you must** attribute the source of the data as JustWatch. If we find any usage not complying with these terms we will revoke access to the API.
     */
    get: operations['GET_movie-movie_id-watch-providers'];
    parameters: {
      path: {
        movie_id: number;
      };
    };
  };
  '/person/{person_id}/images': {
    /** Get the images for a person. */
    get: operations['GET_person-person_id-images'];
    parameters: {
      path: {
        person_id: number;
      };
    };
  };
  '/tv/{tv_id}/season/{season_number}/episode/{episode_number}/external_ids': {
    /**
     * Get the external ids for a TV episode. We currently support the following external sources.
     *
     * | **External Sources** |
     * | -------------------- |
     * | IMDb ID              |
     * | TVDB ID              |
     * | Freebase MID*        |
     * | Freebase ID*         |
     * | TVRage ID*           |
     *
     * *Defunct or no longer available as a service.
     */
    get: operations['GET_tv-tv_id-season-season_number-episode-episode_number-external_ids'];
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
  };
  '/account/{account_id}/lists': {
    /** Get all of the lists created by an account. Will invlude private lists if you are the owner. */
    get: operations['GET_account-account_id-lists'];
    parameters: {
      path: {
        account_id: number;
      };
    };
  };
  '/list/{list_id}/remove_item': {
    /** Remove a movie from a list. */
    post: operations['POST_list-list_id-remove_item'];
    parameters: {
      path: {
        list_id: string;
      };
    };
  };
  '/find/{external_id}': {
    /**
     * The find method makes it easy to search for objects in our database by an external id.
     *
     * This method will search all objects (movies, TV shows and people) and return the results in a single response.
     *
     * The supported external sources for each object are as follows.
     *
     * #### Media Databases
     *
     * |              | Movies | TV Shows | TV Seasons | TV Episodes | People |
     * | ------------ | ------ | -------- | ---------- | ----------- | ------ |
     * | IMDb ID      | ✓      | ✓        | ✗          | ✓           | ✓      |
     * | TVDB ID      | ✗      | ✓        | ✓          | ✓           | ✗      |
     * | Freebase MID*| ✗      | ✓        | ✓          | ✓           | ✓      |
     * | Freebase ID* | ✗      | ✓        | ✓          | ✓           | ✓      |
     * | TVRage ID*   | ✗      | ✓        | ✓          | ✓           | ✓      |
     *
     * #### Social IDs
     *
     * |              | Movies | TV Shows | TV Seasons | TV Episodes | People |
     * | ------------ | ------ | -------- | ---------- | ----------- | ------ |
     * | Facebook     | ✓      | ✓        | ✗          | ✗           | ✓      |
     * | Instagram    | ✓      | ✓        | ✗          | ✗           | ✓      |
     * | Twitter      | ✓      | ✓        | ✗          | ✗           | ✓      |
     *
     * *Defunct or no longer available as a service.
     */
    get: operations['GET_find-external_id'];
    parameters: {
      path: {
        external_id: string;
      };
    };
  };
  '/genre/movie/list': {
    /** Get the list of official genres for movies. */
    get: operations['GET_genre-movie-list'];
  };
  '/tv/{tv_id}/similar': {
    /** Get a list of similar TV shows. These items are assembled by looking at keywords and genres. */
    get: operations['GET_tv-tv_id-similar'];
    parameters: {
      path: {
        tv_id: number;
      };
    };
  };
}

export interface definitions {
  /** image-path */
  'image-path': unknown;
  /** Movie List Result Object */
  'movie-list-object': {
    poster_path?: definitions['image-path'];
    adult?: boolean;
    overview?: string;
    release_date?: string;
    genre_ids?: number[];
    id?: number;
    original_title?: string;
    original_language?: string;
    title?: string;
    backdrop_path?: definitions['image-path'];
    popularity?: number;
    vote_count?: number;
    video?: boolean;
    vote_average?: number;
  };
  /** Movie List Result With Rating Object */
  'movie-list-result-with-rating-object': {
    adult?: boolean;
    backdrop_path?: definitions['image-path'];
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    release_date?: string;
    poster_path?: definitions['image-path'];
    popularity?: number;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    rating?: number;
  };
  /** Movie List Results Object (with media_type) */
  'movie-list-results-object-with-media_type': {
    poster_path?: definitions['image-path'];
    adult?: boolean;
    overview?: string;
    release_date?: string;
    original_title?: string;
    genre_ids?: number[];
    id?: number;
    /** @enum {string} */
    media_type: 'movie';
    original_language?: string;
    title?: string;
    backdrop_path?: definitions['image-path'];
    popularity?: number;
    vote_count?: number;
    video?: boolean;
    vote_average?: number;
  };
  /** Person List Result Object (with media type) */
  'person-list-result-object-with-media-type': {
    profile_path?: definitions['image-path'];
    adult?: boolean;
    id?: number;
    /** @enum {string} */
    media_type: 'person';
    known_for?: (
      | definitions['movie-list-results-object-with-media_type']
      | definitions['tv-list-results-object-with-media_type']
    )[];
    name?: string;
    popularity?: number;
  };
  /** Person List Results Object */
  'person-list-results-object': {
    profile_path?: definitions['image-path'];
    adult?: boolean;
    id?: number;
    known_for?: (
      | definitions['movie-list-results-object-with-media_type']
      | definitions['tv-list-results-object-with-media_type']
    )[];
    name?: string;
    popularity?: number;
  };
  /** TV List Result Object */
  'tv-list-result-object': {
    poster_path?: definitions['image-path'];
    popularity?: number;
    id?: number;
    backdrop_path?: definitions['image-path'];
    vote_average?: number;
    overview?: string;
    first_air_date?: string;
    origin_country?: string[];
    genre_ids?: number[];
    original_language?: string;
    vote_count?: number;
    name?: string;
    original_name?: string;
  };
  /** TV List Result With Rating Object */
  'tv-list-result-with-rating-object': {
    backdrop_path?: definitions['image-path'];
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_name?: string;
    overview?: string;
    origin_country?: string[];
    poster_path?: definitions['image-path'];
    popularity?: number;
    name?: string;
    vote_average?: number;
    vote_count?: number;
    rating?: number;
  };
  /** TV List Results Object (with media_type) */
  'tv-list-results-object-with-media_type': {
    poster_path?: definitions['image-path'];
    popularity?: number;
    id?: number;
    overview?: string;
    backdrop_path?: definitions['image-path'];
    vote_average?: number;
    /** @enum {string} */
    media_type: 'tv';
    first_air_date?: string;
    origin_country?: string[];
    genre_ids?: number[];
    original_language?: string;
    vote_count?: number;
    name?: string;
    original_name?: string;
  };
}

export interface parameters {
  'trait:sessionOrGuestSession:guest_session_id': string;
  'trait:sessionOrGuestSession:session_id': string;
  'trait:session:session_id': string;
  /** @default application/json;charset=utf-8 */
  'trait:jsonContentType:Content-Type': string;
}

export interface responses {
  'trait:standardErrors:401': {
    schema: {
      status_message?: string;
      status_code?: number;
    };
  };
  'trait:standardErrors:404': {
    schema: {
      status_message?: string;
      status_code?: number;
    };
  };
  'trait:sessionErrors:401': {
    schema: {
      status_code?: number;
      status_message?: string;
    };
  };
}

export interface operations {
  /** Get an up to date list of the officially supported movie certifications on TMDB. */
  'GET_certification-movie-list': {
    responses: {
      200: {
        schema: {
          certifications?: {
            US?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            CA?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            DE?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            GB?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            AU?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            BR?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            FR?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            NZ?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            IN?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
          };
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Powered by our partnership with JustWatch, you can query this method to get a list of the availabilities per country by provider.
   *
   * This is **not** going to return full deep links, but rather, it's just enough information to display what's available where.
   *
   * You can link to the provided TMDB URL to help support TMDB and provide the actual deep links to the content.
   *
   * **Please note**: In order to use this data **you must** attribute the source of the data as JustWatch. If we find any usage not complying with these terms we will revoke access to the API.
   */
  'GET_tv-tv_id-watch-providers': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            AR?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            AT?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            AU?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            BE?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            BR?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            CA?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            CH?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            CL?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            CO?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            CZ?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            DE?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            DK?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            EC?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            ES?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            FI?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            FR?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            GB?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            HU?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            IE?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            IN?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            IT?: {
              link?: string;
              ads?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            JP?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            MX?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            NL?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            NO?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            NZ?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            PE?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            PL?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              ads?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            PT?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            RO?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            RU?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              free?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            SE?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            TR?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            US?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            VE?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            ZA?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
          };
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of the current popular movies on TMDB. This list updates daily. */
  'GET_movie-popular': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-object'][];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the changes for a person. By default only the last 24 hours are returned.
   *
   * You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
   */
  'GET_person-person_id-changes': {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          changes?: {
            key?: string;
            items?: {
              id?: string;
              action?: string;
              time?: string;
              original_value?: {
                profile?: {
                  file_path?: string;
                };
              };
            }[];
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the images that belong to a movie.
   *
   * Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
   */
  'GET_movie-movie_id-images': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        include_image_language?: string;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          backdrops?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            iso_639_1?: unknown;
            vote_average?: number;
            vote_count?: number;
            width?: number;
          }[];
          posters?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            iso_639_1?: unknown;
            vote_average?: number;
            vote_count?: number;
            width?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Use this method to create a v3 session ID if you already have a valid v4 access token. The v4 token needs to be authenticated by the user. Your standard "read token" will not validate to create a session ID. */
  'POST_authentication-session-convert-4': {
    parameters: {
      body: {
        body?: {
          access_token: string;
        };
      };
    };
    responses: {
      200: {
        schema: {
          success?: boolean;
          session_id?: string;
        };
      };
      401: responses['trait:sessionErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Returns a list of the watch provider (OTT/streaming) data we have available for TV series. You can specify a `watch_region` param if you want to further filter the list by country. */
  'GET_watch-providers-tv': {
    parameters: {
      query: {
        /** Use the ISO-3166-1 code to filter the providers that are available in a particular country. */
        watch_region?: string;
      };
    };
    responses: {
      200: {
        schema: {
          results?: {
            display_priority?: number;
            logo_path?: string;
            provider_name?: string;
            provider_id?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Create a list. */
  POST_list: {
    parameters: {
      body: {
        body?: {
          name?: string;
          description?: string;
          language?: string;
        };
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      201: {
        schema: {
          status_message?: string;
          success?: boolean;
          status_code?: number;
          list_id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of lists that this movie belongs to. */
  'GET_movie-movie_id-lists': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          page?: number;
          results?: {
            description?: string;
            favorite_count?: number;
            id?: number;
            item_count?: number;
            iso_639_1?: string;
            list_type?: string;
            name?: string;
            poster_path?: unknown;
          }[];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get a list of TV shows that are airing today. This query is purely day based as we do not currently support airing times.
   *
   * You can specify a [timezone](endpoint:KQ4CDdEoWKJYLkrhS) to offset the day calculation. Without a specified timezone, this query defaults to EST (Eastern Time UTC-05:00).
   */
  'GET_tv-airing_today': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-object'][];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the list of popular people on TMDB. This list updates daily. */
  'GET_person-popular': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: {
            profile_path?: string;
            adult?: boolean;
            id?: number;
            known_for?: (
              | definitions['movie-list-results-object-with-media_type']
              | definitions['tv-list-results-object-with-media_type']
            )[];
            name?: string;
            popularity?: number;
          }[];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Rate a TV show.
   *
   * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
   */
  'POST_tv-tv_id-rating': {
    parameters: {
      path: {
        tv_id: number;
      };
      body: {
        body?: {
          value: number;
        };
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
      query: {
        guest_session_id?: parameters['trait:sessionOrGuestSession:guest_session_id'];
        session_id?: parameters['trait:sessionOrGuestSession:session_id'];
      };
    };
    responses: {
      201: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:sessionErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Remove your rating for a TV show.
   *
   * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
   */
  'DELETE_tv-tv_id-rating': {
    parameters: {
      path: {
        tv_id: number;
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
      query: {
        guest_session_id?: parameters['trait:sessionOrGuestSession:guest_session_id'];
        session_id?: parameters['trait:sessionOrGuestSession:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:sessionErrors:401'];
    };
  };
  /** Get a companies details by id. */
  'GET_company-company_id': {
    parameters: {
      path: {
        company_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          description?: string;
          headquarters?: string;
          homepage?: string;
          id?: number;
          logo_path?: string;
          name?: string;
          origin_country?: string;
          parent_company?: unknown;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the external ids for a movie. We currently support the following external sources.
   *
   * | **Media Databases** | **Social IDs** |
   * | ------------------- | -------------- |
   * | IMDb ID             | Facebook       |
   * |                     | Instagram      |
   * |                     | Twitter        |
   */
  'GET_movie-movie_id-external_ids': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          imdb_id?: unknown;
          facebook_id?: unknown;
          instagram_id?: unknown;
          twitter_id?: unknown;
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Discover movies by different types of data like average rating, number of votes, genres and certifications. You can get a valid list of certifications from the [certifications list](#endpoint:faFKjuKG2HnwexAWM) method.
   *
   * Discover also supports a nice list of sort options. See below for all of the available options.
   *
   * Please note, when using `certification` \ `certification.lte` you must also specify `certification_country`. These two parameters work together in order to filter the results. You can only filter results with the countries we have added to our [certifications list](#endpoint:faFKjuKG2HnwexAWM).
   *
   * If you specify the `region` parameter, the regional release date will be used instead of the primary release date. The date returned will be the first date based on your query (ie. if a `with_release_type` is specified). It's important to note the order of the release types that are used. Specifying "2|3" would return the limited theatrical release date as opposed to "3|2" which would return the theatrical date.
   *
   * Also note that a number of filters support being comma (`,`) or pipe (`|`) separated. Comma's are treated like an `AND` and query while pipe's are an `OR`.
   *
   * Some examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | November 18, 2021 | A new `without_companies` filter is available.|
   * | April 13, 2021 | A new `with_watch_monetization_types` filter is available to use with `watch_region`.|
   * | January 2, 2021 | A new set of filters are available for watch provider filtering. Check out `with_watch_providers` and `watch_region`.|
   */
  'GET_discover-movie': {
    parameters: {
      query: {
        /** Choose from one of the many available sort options. */
        sort_by?:
          | ''
          | 'popularity.asc'
          | 'popularity.desc'
          | 'release_date.asc'
          | 'release_date.desc'
          | 'revenue.asc'
          | 'revenue.desc'
          | 'primary_release_date.asc'
          | 'primary_release_date.desc'
          | 'original_title.asc'
          | 'original_title.desc'
          | 'vote_average.asc'
          | 'vote_average.desc'
          | 'vote_count.asc'
          | 'vote_count.desc';
        /** Used in conjunction with the certification filter, use this to specify a country with a valid certification. */
        certification_country?: string;
        /** Filter results with a valid certification from the 'certification_country' field. */
        certification?: string;
        /** Filter and only include movies that have a certification that is less than or equal to the specified value. */
        'certification.lte'?: string;
        /** Filter and only include movies that have a certification that is greater than or equal to the specified value. */
        'certification.gte'?: string;
        /** A filter and include or exclude adult movies. */
        include_adult?: boolean;
        /** A filter to include or exclude videos. */
        include_video?: boolean;
        /** Specify a language to query translatable fields with. */
        language?: string;
        /** Specify the page of results to query. */
        page?: number;
        /** A filter to limit the results to a specific primary release year. */
        primary_release_year?: number;
        /** Filter and only include movies that have a primary release date that is greater or equal to the specified value. */
        'primary_release_date.gte'?: string;
        /** Filter and only include movies that have a primary release date that is less than or equal to the specified value. */
        'primary_release_date.lte'?: string;
        /** Filter and only include movies that have a release date (looking at all release dates) that is greater or equal to the specified value. */
        'release_date.gte'?: string;
        /** Filter and only include movies that have a release date (looking at all release dates) that is less than or equal to the specified value. */
        'release_date.lte'?: string;
        /** Specify a comma (AND) or pipe (OR) separated value to filter release types by. These release types map to the same values found on the movie release date method. */
        with_release_type?: number;
        /** A filter to limit the results to a specific year (looking at all release dates). */
        year?: number;
        /** Filter and only include movies that have a vote count that is greater or equal to the specified value. */
        'vote_count.gte'?: number;
        /** Filter and only include movies that have a vote count that is less than or equal to the specified value. */
        'vote_count.lte'?: number;
        /** Filter and only include movies that have a rating that is greater or equal to the specified value. */
        'vote_average.gte'?: number;
        /** Filter and only include movies that have a rating that is less than or equal to the specified value. */
        'vote_average.lte'?: number;
        /** A comma separated list of person ID's. Only include movies that have one of the ID's added as an actor. */
        with_cast?: string;
        /** A comma separated list of person ID's. Only include movies that have one of the ID's added as a crew member. */
        with_crew?: string;
        /** A comma separated list of person ID's. Only include movies that have one of the ID's added as a either a actor or a crew member. */
        with_people?: string;
        /** A comma separated list of production company ID's. Only include movies that have one of the ID's added as a production company. */
        with_companies?: string;
        /** Comma separated value of genre ids that you want to include in the results. */
        with_genres?: string;
        /** Comma separated value of genre ids that you want to exclude from the results. */
        without_genres?: string;
        /** A comma separated list of keyword ID's. Only includes movies that have one of the ID's added as a keyword. */
        with_keywords?: string;
        /** Exclude items with certain keywords. You can comma and pipe seperate these values to create an 'AND' or 'OR' logic. */
        without_keywords?: string;
        /** Filter and only include movies that have a runtime that is greater or equal to a value. */
        'with_runtime.gte'?: number;
        /** Filter and only include movies that have a runtime that is less than or equal to a value. */
        'with_runtime.lte'?: number;
        /** Specify an ISO 639-1 string to filter results by their original language value. */
        with_original_language?: string;
        /** A comma or pipe separated list of watch provider ID's. Combine this filter with `watch_region` in order to filter your results by a specific watch provider in a specific region. */
        with_watch_providers?: string;
        /** An ISO 3166-1 code. Combine this filter with `with_watch_providers` in order to filter your results by a specific watch provider in a specific region. */
        watch_region?: string;
        /** In combination with `watch_region`, you can filter by monetization type. */
        with_watch_monetization_types?: 'flatrate' | 'free' | 'ads' | 'rent' | 'buy';
        /** Filter the results to exclude the specific production companies you specify here. `AND` / `OR` filters are supported. */
        without_companies?: string;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-object'][];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Search for keywords. */
  'GET_search-keyword': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: {
            id?: number;
            name?: string;
          }[];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of translations that have been created for a movie. */
  'GET_movie-movie_id-translations': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          translations?: {
            iso_3166_1?: string;
            iso_639_1?: string;
            name?: string;
            english_name?: string;
            data?: {
              title?: string;
              overview?: string;
              homepage?: string;
            };
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Clear all of the items from a list. */
  'POST_list-list_id-clear': {
    parameters: {
      path: {
        list_id: string;
      };
      query: {
        confirm: boolean;
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      201: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get your rating for a episode. */
  'GET_tv-tv_id-season-season_number-episode-episode_number-account_states': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
      query: {
        guest_session_id?: parameters['trait:sessionOrGuestSession:guest_session_id'];
        session_id?: parameters['trait:sessionOrGuestSession:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          rated?: unknown;
        };
      };
      401: responses['trait:sessionErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the movie and TV credits together in a single response. */
  'GET_person-person_id-combined_credits': {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          cast?: {
            id?: number;
            original_language?: string;
            episode_count?: number;
            overview?: string;
            origin_country?: string[];
            original_name?: string;
            genre_ids?: number[];
            name?: string;
            media_type?: string;
            poster_path?: definitions['image-path'];
            first_air_date?: string;
            vote_average?: unknown;
            vote_count?: number;
            character?: string;
            backdrop_path?: definitions['image-path'];
            popularity?: number;
            credit_id?: string;
            original_title?: string;
            video?: boolean;
            release_date?: string;
            title?: string;
            adult?: boolean;
          }[];
          crew?: {
            id?: number;
            department?: string;
            original_language?: string;
            episode_count?: number;
            job?: string;
            overview?: string;
            origin_country?: string[];
            original_name?: string;
            vote_count?: number;
            name?: string;
            media_type?: string;
            popularity?: number;
            credit_id?: string;
            backdrop_path?: definitions['image-path'];
            first_air_date?: string;
            vote_average?: number;
            genre_ids?: number[];
            poster_path?: definitions['image-path'];
            original_title?: string;
            video?: boolean;
            title?: string;
            adult?: boolean;
            release_date?: string;
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the videos that have been added to a TV episode.
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
   * | March 23, 2019 | Vimeo was added as a video source. |
   * | March 20, 2019 | "Behind the Scenes", "Bloopers" and "Recap" were added as valid video types. |
   */
  'GET_tv-tv_id-season-season_number-episode-episode_number-videos': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            iso_639_1?: string;
            iso_3166_1?: string;
            name?: string;
            key?: string;
            published_at?: string;
            site?: string;
            size?: number;
            type?: string;
            official?: boolean;
            id?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the TV episode details by id.
   *
   * Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | June 1, 2018 | Added the [translations](#endpoint:5SFwZar3LkP99QMp7) method. |
   */
  'GET_tv-tv_id-season-season_number-episode-episode_number': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          /** Format: date */
          air_date?: string;
          crew?: {
            id?: number;
            credit_id?: string;
            name?: string;
            department?: string;
            job?: string;
            profile_path?: definitions['image-path'];
          }[];
          episode_number?: number;
          guest_stars?: {
            id?: number;
            name?: string;
            credit_id?: string;
            character?: string;
            order?: number;
            profile_path?: definitions['image-path'];
          }[];
          name?: string;
          overview?: string;
          id?: number;
          production_code?: unknown;
          season_number?: number;
          still_path?: definitions['image-path'];
          vote_average?: number;
          vote_count?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the videos that have been added to a movie.
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
   * | March 23, 2019 | Vimeo was added as a video source. |
   * | March 20, 2019 | "Behind the Scenes" and "Bloopers" were added as valid video types. |
   */
  'GET_movie-movie_id-videos': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            iso_639_1?: string;
            iso_3166_1?: string;
            name?: string;
            key?: string;
            site?: string;
            size?: number;
            type?: string;
            official?: boolean;
            published_at?: string;
            id?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the rated TV episodes for a guest session. */
  'GET_guest_session-guest_session_id-rated-tv-episodes': {
    parameters: {
      path: {
        guest_session_id: string;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: {
            air_date?: string;
            episode_number?: number;
            id?: number;
            name?: string;
            overview?: string;
            production_code?: unknown;
            season_number?: number;
            show_id?: number;
            still_path?: definitions['image-path'];
            vote_average?: unknown;
            vote_count?: number;
            rating?: unknown;
          }[];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the list of content ratings (certifications) that have been added to a TV show. */
  'GET_tv-tv_id-content_ratings': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          results?: {
            iso_3166_1?: string;
            rating?: string;
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Search for companies. */
  'GET_search-company': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: {
            id?: number;
            logo_path?: unknown;
            name?: string;
          }[];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  'GET_keyword-keyword_id': {
    parameters: {
      path: {
        keyword_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          name?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the reviews for a TV show. */
  'GET_tv-tv_id-reviews': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          page?: number;
          results?: {
            author?: string;
            author_details?: {
              name?: string;
              username?: string;
              avatar_path?: definitions['image-path'];
              rating?: number;
            };
            content?: string;
            created_at?: string;
            id?: string;
            updated_at?: string;
            url?: string;
          }[];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get collection details by id.
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | March 16, 2018 | Added the [translations](#endpoint:bhcsxEgRvyk3N7FnD) method. |
   */
  'GET_collection-collection_id': {
    parameters: {
      path: {
        collection_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          name?: string;
          overview?: string;
          poster_path?: unknown;
          backdrop_path?: string;
          parts?: {
            adult?: boolean;
            backdrop_path?: unknown;
            genre_ids?: number[];
            id?: number;
            original_language?: string;
            original_title?: string;
            overview?: string;
            release_date?: string;
            poster_path?: string;
            popularity?: number;
            title?: string;
            video?: boolean;
            vote_average?: number;
            vote_count?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the rated movies for a guest session. */
  'GET_guest_session-guest_session_id-rated-movies': {
    parameters: {
      path: {
        guest_session_id: string;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-result-with-rating-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the images that belong to a TV show.
   *
   * Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
   */
  'GET_tv-tv_id-images': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          backdrops?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            iso_639_1?: unknown;
            vote_average?: number;
            vote_count?: number;
            width?: number;
          }[];
          id?: number;
          posters?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            iso_639_1?: unknown;
            vote_average?: number;
            vote_count?: number;
            width?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** You can use this method to create a fully valid session ID once a user has validated the request token. More information about how this works can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ). */
  'POST_authentication-session-new': {
    parameters: {
      body: {
        body?: {
          request_token: string;
        };
      };
    };
    responses: {
      200: {
        schema: {
          success?: boolean;
          session_id?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the movie credits for a person. */
  'GET_person-person_id-movie_credits': {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          cast?: {
            character?: string;
            credit_id?: string;
            release_date?: string;
            vote_count?: number;
            video?: boolean;
            adult?: boolean;
            vote_average?: unknown;
            title?: string;
            genre_ids?: number[];
            original_language?: string;
            original_title?: string;
            popularity?: number;
            id?: number;
            backdrop_path?: definitions['image-path'];
            overview?: string;
            poster_path?: definitions['image-path'];
          }[];
          crew?: {
            id?: number;
            department?: string;
            original_language?: string;
            original_title?: string;
            job?: string;
            overview?: string;
            vote_count?: number;
            video?: boolean;
            poster_path?: definitions['image-path'];
            backdrop_path?: definitions['image-path'];
            title?: string;
            popularity?: number;
            genre_ids?: number[];
            vote_average?: number;
            adult?: boolean;
            release_date?: string;
            credit_id?: string;
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * This method allows an application to validate a request token by entering a username and password.
   *
   * Not all applications have access to a web view so this can be used as a substitute.
   *
   * Please note, the preferred method of validating a request token is to have a user authenticate the request via the TMDB website. You can read about that method [here](#docTextSection:NSZtgz7zptsiLYxXZ).
   *
   * If you decide to use this method please **use HTTPS**.
   */
  'POST_authentication-token-validate_with_login': {
    parameters: {
      body: {
        body?: {
          username: string;
          password: string;
          request_token: string;
        };
      };
    };
    responses: {
      200: {
        schema: {
          success?: boolean;
          expires_at?: string;
          request_token?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the credits (cast and crew) that have been added to a TV show. */
  'GET_tv-tv_id-credits': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          cast?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            ''?: definitions['image-path'];
            character?: string;
            credit_id?: string;
            order?: number;
          }[];
          crew?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
            credit_id?: string;
            department?: string;
            job?: string;
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the primary person details by id.
   *
   * Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | July 17, 2018 | Added the `known_for_department` field. |
   * | April 26, 2018 | Added the [translations](#endpoint:CSaMjCxXAtGpxNGfS) method. |
   * | November 9, 2016 | Biographies are now translatable on TMDB. This means you can query person details with a language parameter. |
   */
  'GET_person-person_id': {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          birthday?: unknown;
          known_for_department?: string;
          deathday?: unknown;
          id?: number;
          name?: string;
          also_known_as?: string[];
          gender?: number;
          biography?: string;
          popularity?: number;
          place_of_birth?: unknown;
          profile_path?: definitions['image-path'];
          adult?: boolean;
          imdb_id?: string;
          homepage?: unknown;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the TV network logos by id.
   *
   * There are two image formats that are supported for networks, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.
   *
   * For more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).
   */
  'GET_network-network_id-images': {
    parameters: {
      path: {
        network_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          logos?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            id?: string;
            /** @enum {string} */
            file_type?: '.svg' | '.png';
            vote_average?: number;
            vote_count?: number;
            width?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of all the movies you have rated. */
  'GET_account-account_id-rated-movies': {
    parameters: {
      path: {
        account_id: number;
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-result-with-rating-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the changes for a TV show. By default only the last 24 hours are returned.
   *
   * You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
   *
   * TV show changes are different than movie changes in that there are some edits on seasons and episodes that will create a change entry at the show level. These can be found under the season and episode keys. These keys will contain a `series_id` and `episode_id`. You can use the [season changes](#endpoint:ZqhtyQbJ4YXz8RSya) and [episode changes](#endpoint:FpqrhBzgf2RJv4bHC) methods to look these up individually.
   */
  'GET_tv-tv_id-changes': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          changes?: {
            key?: string;
            items?: {
              id?: string;
              action?: string;
              time?: string;
            }[];
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Discover TV shows by different types of data like average rating, number of votes, genres, the network they aired on and air dates.
   *
   * Discover also supports a nice list of sort options. See below for all of the available options.
   *
   * Also note that a number of filters support being comma (`,`) or pipe (`|`) separated. Comma's are treated like an `AND` and query while pipe's are an `OR`.
   *
   * Some examples of what can be done with discover can be found [here](https://www.themoviedb.org/documentation/api/discover).
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | November 18, 2021 | Some new filters are available: `with_status`, `with_type` and `without_companies`.|
   * | April 13, 2021 | A new `with_watch_monetization_types` filter is available to use with `watch_region`.|
   * | January 2, 2021 | A new set of filters are available for watch provider filtering. Check out `with_watch_providers` and `watch_region`.|
   */
  'GET_discover-tv': {
    parameters: {
      query: {
        /** Choose from one of the many available sort options. */
        sort_by?:
          | ''
          | 'vote_average.desc'
          | 'vote_average.asc'
          | 'first_air_date.desc'
          | 'first_air_date.asc'
          | 'popularity.desc'
          | 'popularity.asc';
        /** Filter and only include TV shows that have a air date (by looking at all episodes) that is greater or equal to the specified value. */
        'air_date.gte'?: string;
        /** Filter and only include TV shows that have a air date (by looking at all episodes) that is less than or equal to the specified value. */
        'air_date.lte'?: string;
        /** Filter and only include TV shows that have a original air date that is greater or equal to the specified value. Can be used in conjunction with the "include_null_first_air_dates" filter if you want to include items with no air date. */
        'first_air_date.gte'?: string;
        /** Filter and only include TV shows that have a original air date that is less than or equal to the specified value. Can be used in conjunction with the "include_null_first_air_dates" filter if you want to include items with no air date. */
        'first_air_date.lte'?: string;
        /** Filter and only include TV shows that have a original air date year that equal to the specified value. Can be used in conjunction with the "include_null_first_air_dates" filter if you want to include items with no air date. */
        first_air_date_year?: number;
        /** Specify a language to query translatable fields with. */
        language?: string;
        /** Specify the page of results to query. */
        page?: number;
        /** Used in conjunction with the air_date.gte/lte filter to calculate the proper UTC offset. */
        timezone?: string;
        /** Filter and only include movies that have a rating that is greater or equal to the specified value. */
        'vote_average.gte'?: number;
        /** Filter and only include movies that have a rating that is less than or equal to the specified value. */
        'vote_count.gte'?: number;
        /** Comma separated value of genre ids that you want to include in the results. */
        with_genres?: string;
        /** Comma separated value of network ids that you want to include in the results. */
        with_networks?: string;
        /** Comma separated value of genre ids that you want to exclude from the results. */
        without_genres?: string;
        /** Filter and only include TV shows with an episode runtime that is greater than or equal to a value. */
        'with_runtime.gte'?: number;
        /** Filter and only include TV shows with an episode runtime that is less than or equal to a value. */
        'with_runtime.lte'?: number;
        /** Use this filter to include TV shows that don't have an air date while using any of the "first_air_date" filters. */
        include_null_first_air_dates?: boolean;
        /** Specify an ISO 639-1 string to filter results by their original language value. */
        with_original_language?: string;
        /** Exclude items with certain keywords. You can comma and pipe seperate these values to create an 'AND' or 'OR' logic. */
        without_keywords?: string;
        /** Filter results to include items that have been screened theatrically. */
        screened_theatrically?: boolean;
        /** A comma separated list of production company ID's. Only include movies that have one of the ID's added as a production company. */
        with_companies?: string;
        /** A comma separated list of keyword ID's. Only includes TV shows that have one of the ID's added as a keyword. */
        with_keywords?: string;
        /** A comma or pipe separated list of watch provider ID's. Combine this filter with `watch_region` in order to filter your results by a specific watch provider in a specific region. */
        with_watch_providers?: string;
        /** An ISO 3166-1 code. Combine this filter with `with_watch_providers` in order to filter your results by a specific watch provider in a specific region. */
        watch_region?: string;
        /** In combination with `watch_region`, you can filter by monetization type. */
        with_watch_monetization_types?: 'flatrate' | 'free' | 'ads' | 'rent' | 'buy';
        /**
         * Filter TV shows by their status.
         *
         * Returning Series: 0
         * Planned: 1
         * In Production: 2
         * Ended: 3
         * Cancelled: 4
         * Pilot: 5
         */
        with_status?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
         * Filter TV shows by their type.
         *
         * Documentary: 0
         * News: 1
         * Miniseries: 2
         * Reality: 3
         * Scripted: 4
         * Talk Show: 5
         * Video: 6
         */
        with_type?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
        /** Filter the results to exclude the specific production companies you specify here. `AND` / `OR` filters are supported. */
        without_companies?: string;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-object'][];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Search for people. */
  'GET_search-person': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: {
            profile_path?: definitions['image-path'];
            adult?: boolean;
            id?: number;
            known_for?: (
              | definitions['movie-list-results-object-with-media_type']
              | definitions['tv-list-results-object-with-media_type']
            )[];
            name?: string;
            popularity?: number;
          }[];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the credits for TV season. */
  'GET_tv-tv_id-season-season_number-credits': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          cast?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
            character?: string;
            credit_id?: string;
            order?: number;
          }[];
          crew?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
            credit_id?: string;
            department?: string;
            job?: string;
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the details of a list. */
  'GET_list-list_id': {
    parameters: {
      path: {
        list_id: string;
      };
    };
    responses: {
      200: {
        schema: {
          created_by?: string;
          description?: string;
          favorite_count?: number;
          id?: string;
          items?: definitions['movie-list-object'][];
          item_count?: number;
          iso_639_1?: string;
          name?: string;
          poster_path?: definitions['image-path'];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Delete a list. */
  'DELETE_list-list_id': {
    parameters: {
      path: {
        list_id: string;
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      201: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the list of official genres for TV shows. */
  'GET_genre-tv-list': {
    responses: {
      200: {
        schema: {
          genres?: {
            id?: number;
            name?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the translation data for an episode. */
  'GET_tv-tv_id-season-season_number-episode-episode_number-translations': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          translations?: {
            iso_3166_1?: string;
            iso_639_1?: string;
            name?: string;
            english_name?: string;
            data?: {
              name?: string;
              overview?: string;
            };
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * This method will let you create a new guest session. Guest sessions are a type of session that will let a user rate movies and TV shows but not require them to have a TMDB user account. More information about user authentication can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ).
   *
   * Please note, you should only generate a single guest session per user (or device) as you will be able to attach the ratings to a TMDB user account in the future. There is also IP limits in place so you should always make sure it's the end user doing the guest session actions.
   *
   * If a guest session is not used for the first time within 24 hours, it will be automatically deleted.
   */
  'GET_authentication-guest_session-new': {
    responses: {
      200: {
        schema: {
          success?: boolean;
          guest_session_id?: string;
          expires_at?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Search for movies. */
  'GET_search-movie': {
    parameters: {
      query: {
        year?: number;
        primary_release_year?: number;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-object'][];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the TV season details by id.
   *
   * Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
   */
  'GET_tv-tv_id-season-season_number': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          _id?: string;
          air_date?: string;
          episodes?: {
            air_date?: string;
            episode_number?: number;
            crew?: {
              department?: string;
              job?: string;
              credit_id?: string;
              adult?: unknown;
              gender?: number;
              id?: number;
              known_for_department?: string;
              name?: string;
              original_name?: string;
              popularity?: number;
              profile_path?: definitions['image-path'];
            }[];
            guest_stars?: {
              credit_id?: string;
              order?: number;
              character?: string;
              adult?: boolean;
              gender?: unknown;
              id?: number;
              known_for_department?: string;
              name?: string;
              original_name?: string;
              popularity?: number;
              profile_path?: definitions['image-path'];
            }[];
            id?: number;
            name?: string;
            overview?: string;
            production_code?: string;
            season_number?: number;
            still_path?: string;
            vote_average?: number;
            vote_count?: number;
          }[];
          name?: string;
          overview?: string;
          id?: number;
          poster_path?: definitions['image-path'];
          season_number?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Search multiple models in a single request. Multi search currently supports searching for movies, tv shows and people in a single request. */
  'GET_search-multi': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: (
            | definitions['movie-list-results-object-with-media_type']
            | definitions['tv-list-results-object-with-media_type']
            | definitions['person-list-result-object-with-media-type']
          )[];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get all of the alternative titles for a movie.
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | March 16, 2018 | Added the `type` field. |
   */
  'GET_movie-movie_id-alternative_titles': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        country?: string;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          titles?: {
            iso_3166_1?: string;
            title?: string;
            type?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get an up to date list of the officially supported TV show certifications on TMDB. */
  'GET_certification-tv-list': {
    responses: {
      200: {
        schema: {
          certifications?: {
            US?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            CA?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            AU?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            FR?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            RU?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            DE?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            TH?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            KR?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            GB?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
            BR?: {
              certification?: string;
              meaning?: string;
              order?: number;
            }[];
          };
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get a list of shows that are currently on the air.
   *
   * This query looks for any TV show that has an episode with an air date in the next 7 days.
   */
  'GET_tv-on_the_air': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-object'][];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the top rated movies on TMDB. */
  'GET_movie-top_rated': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-object'][];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the system wide configuration information. Some elements of the API require some knowledge of this configuration data. The purpose of this is to try and keep the actual API responses as light as possible. It is recommended you cache this data within your application and check for updates every few days.
   *
   * This method currently holds the data relevant to building image URLs as well as the change key map.
   *
   * To build an image URL, you will need 3 pieces of data. The `base_url`, `size` and `file_path`. Simply combine them all and you will have a fully qualified URL. Here’s an example URL:
   *
   *     https://image.tmdb.org/t/p/w500/8uO0gUM8aNqYLs1OsTBQiXu0fEv.jpg
   *
   * The configuration method also contains the list of change keys which can be useful if you are building an app that consumes data from the change feed.
   */
  GET_configuration: {
    parameters: {
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          images?: {
            base_url?: string;
            secure_base_url?: string;
            backdrop_sizes?: string[];
            logo_sizes?: string[];
            poster_sizes?: string[];
            profile_sizes?: string[];
            still_sizes?: string[];
          };
          change_keys?: string[];
        };
      };
    };
  };
  /** Search for collections. */
  'GET_search-collection': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: {
            id?: number;
            backdrop_path?: definitions['image-path'];
            name?: string;
            poster_path?: definitions['image-path'];
          }[];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the images that belong to a TV episode.
   *
   * Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
   */
  'GET_tv-tv_id-season-season_number-episode-episode_number-images': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          stills?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            iso_639_1?: unknown;
            vote_average?: unknown;
            vote_count?: number;
            width?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get a list of similar movies. This is **not** the same as the "Recommendation" system you see on the website.
   *
   * These items are assembled by looking at keywords and genres.
   */
  'GET_movie-movie_id-similar': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of all the movies you have added to your watchlist. */
  'GET_account-account_id-watchlist-movies': {
    parameters: {
      path: {
        account_id: number;
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the user reviews for a movie. */
  'GET_movie-movie_id-reviews': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          page?: number;
          results?: {
            author?: string;
            author_details?: {
              name?: string;
              username?: string;
              avatar_path?: definitions['image-path'];
              rating?: unknown;
            };
            content?: string;
            created_at?: string;
            id?: string;
            updated_at?: string;
            url?: string;
          }[];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the images for a collection by id. */
  'GET_collection-collection_id-images': {
    parameters: {
      path: {
        collection_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          backdrops?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            iso_639_1?: unknown;
            vote_average?: number;
            vote_count?: number;
            width?: number;
          }[];
          posters?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            iso_639_1?: string;
            vote_average?: number;
            vote_count?: number;
            width?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get a list of all of the person ids that have been changed in the past 24 hours.
   *
   * You can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.
   */
  'GET_person-changes': {
    responses: {
      200: {
        schema: {
          results?: {
            id?: number;
            adult?: unknown;
          }[];
          page?: number;
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get all of the episode groups that have been created for a TV show. With a group ID you can call the [get TV episode group details](#endpoint:yCouThc88qs7DGHY5) method. */
  'GET_tv-tv_id-episode_groups': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          results?: {
            description?: string;
            episode_count?: number;
            group_count?: number;
            id?: string;
            name?: string;
            network?: {
              id?: number;
              logo_path?: string;
              name?: string;
              origin_country?: string;
            };
            type?: number;
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get a movie or TV credit details by id.
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | July 13, 2018 | Movie credits are now supported. |
   */
  'GET_credit-credit_id': {
    parameters: {
      path: {
        credit_id: string;
      };
    };
    responses: {
      200: {
        schema: {
          credit_type?: string;
          department?: string;
          job?: string;
          media?: {
            id?: number;
            name?: string;
            original_name?: string;
            character?: string;
            episodes?: {[key: string]: unknown}[];
            seasons?: {
              air_date?: string;
              poster_path?: string;
              season_number?: number;
            }[];
          };
          media_type?: string;
          id?: string;
          person?: {
            name?: string;
            id?: number;
          };
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Rate a TV episode.
   *
   * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
   */
  'POST_tv-tv_id-season-season_number-episode-episode_number-rating': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
      body: {
        body?: {
          value: number;
        };
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
      query: {
        guest_session_id?: parameters['trait:sessionOrGuestSession:guest_session_id'];
        session_id?: parameters['trait:sessionOrGuestSession:session_id'];
      };
    };
    responses: {
      201: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:sessionErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Remove your rating for a TV episode.
   *
   * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
   */
  'DELETE_tv-tv_id-season-season_number-episode-episode_number-rating': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
      query: {
        guest_session_id?: parameters['trait:sessionOrGuestSession:guest_session_id'];
        session_id?: parameters['trait:sessionOrGuestSession:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:sessionErrors:401'];
    };
  };
  /** If you would like to delete (or "logout") from a session, call this method with a valid session ID. */
  'DELETE_authentication-session': {
    parameters: {
      body: {
        body?: {
          session_id: string;
        };
      };
    };
    responses: {
      200: {
        schema: {
          success?: boolean;
        };
      };
      401: responses['trait:sessionErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of the top rated TV shows on TMDB. */
  'GET_tv-top_rated': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-object'][];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Add a movie to a list. */
  'POST_list-list_id-add_item': {
    parameters: {
      path: {
        list_id: string;
      };
      body: {
        body?: {
          media_id: number;
        };
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      201: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the list of your favorite movies. */
  'GET_account-account_id-favorite-movies': {
    parameters: {
      path: {
        account_id: number;
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the images that this person has been tagged in. */
  'GET_person-person_id-tagged_images': {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          page?: number;
          results?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            id?: string;
            iso_639_1?: unknown;
            vote_average?: number;
            vote_count?: number;
            width?: number;
            image_type?: string;
            media?: definitions['movie-list-object'] | definitions['tv-list-result-object'];
            media_type?: string;
          }[];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of the current popular TV shows on TMDB. This list updates daily. */
  'GET_tv-popular': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-object'][];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of all the TV episodes you have rated. */
  'GET_account-account_id-rated-tv-episodes': {
    parameters: {
      path: {
        account_id: string;
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: {
            air_date?: string;
            episode_number?: number;
            id?: number;
            name?: string;
            overview?: string;
            production_code?: unknown;
            season_number?: number;
            show_id?: number;
            still_path?: definitions['image-path'];
            vote_average?: number;
            vote_count?: number;
            rating?: number;
          }[];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the list translations for a collection by id. */
  'GET_collection-collection_id-translations': {
    parameters: {
      path: {
        collection_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          translations?: {
            iso_3166_1?: string;
            iso_639_1?: string;
            name?: string;
            english_name?: string;
            data?: {
              title?: string;
              overview?: string;
              homepage?: string;
            };
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the details of a TV episode group. Groups support 7 different types which are enumerated as the following:
   *
   * 1. Original air date
   * 2. Absolute
   * 3. DVD
   * 4. Digital
   * 5. Story arc
   * 6. Production
   * 7. TV
   */
  'GET_tv-episode_group-id': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        schema: {
          description?: string;
          episode_count?: number;
          group_count?: number;
          groups?: {
            id?: string;
            name?: string;
            order?: number;
            episodes?: {
              air_date?: string;
              episode_number?: number;
              id?: number;
              name?: string;
              overview?: string;
              production_code?: unknown;
              season_number?: number;
              show_id?: number;
              still_path?: definitions['image-path'];
              vote_average?: number;
              vote_count?: number;
              order?: number;
            }[];
            locked?: boolean;
          }[];
          id?: string;
          name?: string;
          network?: {
            id?: number;
            logo_path?: definitions['image-path'];
            name?: string;
            origin_country?: string;
          };
          type?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the list of countries (ISO 3166-1 tags) used throughout TMDB. */
  'GET_configuration-countries': {
    parameters: {
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          iso_3166_1?: string;
          english_name?: string;
        }[];
      };
    };
  };
  /** Get the list of timezones used throughout TMDB. */
  'GET_configuration-timezones': {
    parameters: {
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          iso_3166_1?: string;
          zones?: string[];
        }[];
      };
    };
  };
  /** Returns all of the user ratings for the season's episodes. */
  'GET_tv-tv_id-season-season_number-account_states': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
      query: {
        guest_session_id?: parameters['trait:sessionOrGuestSession:guest_session_id'];
        session_id?: parameters['trait:sessionOrGuestSession:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            id?: number;
            episode_number?: number;
            rated?: {
              value?: number;
            };
          }[];
        };
      };
      401: responses['trait:sessionErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the keywords that have been added to a movie. */
  'GET_movie-movie_id-keywords': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          keywords?: {
            id?: number;
            name?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the external ids for a TV show. We currently support the following external sources.
   *
   * | **Media Databases** | **Social IDs** |
   * | ------------------- | -------------- |
   * | IMDb ID             | Facebook       |
   * | TVDB ID             | Instagram      |
   * | Freebase MID*       | Twitter        |
   * | Freebase ID*        |                |
   * | TVRage ID*          |                |
   *
   * *Defunct or no longer available as a service.
   */
  'GET_tv-tv_id-external_ids': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          imdb_id?: unknown;
          freebase_mid?: unknown;
          freebase_id?: unknown;
          tvdb_id?: unknown;
          tvrage_id?: unknown;
          facebook_id?: unknown;
          instagram_id?: unknown;
          twitter_id?: unknown;
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** This method allows you to mark a movie or TV show as a favorite item. */
  'POST_account-account_id-favorite': {
    parameters: {
      path: {
        account_id: number;
      };
      body: {
        body?: {
          /** @enum {string} */
          media_type: 'movie' | 'tv';
          media_id: number;
          favorite: boolean;
        };
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
    };
    responses: {
      201: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the images that belong to a TV season.
   *
   * Querying images with a `language` parameter will filter the results. If you want to include a fallback language (especially useful for backdrops) you can use the `include_image_language` parameter. This should be a comma seperated value like so: `include_image_language=en,null`.
   */
  'GET_tv-tv_id-season-season_number-images': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          posters?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            iso_639_1?: string;
            vote_average?: unknown;
            vote_count?: number;
            width?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get  a list of all of the movie ids that have been changed in the past 24 hours.
   *
   * You can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.
   */
  'GET_movie-changes': {
    responses: {
      200: {
        schema: {
          results?: {
            id?: number;
            adult?: unknown;
          }[];
          page?: number;
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of the jobs and departments we use on TMDB. */
  'GET_configuration-jobs': {
    parameters: {
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          department?: string;
          jobs?: string[];
        }[];
      };
    };
  };
  /** Get your account details. */
  GET_account: {
    parameters: {
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          avatar?: {
            gravatar?: {
              hash?: string;
            };
          };
          id?: number;
          iso_639_1?: string;
          iso_3166_1?: string;
          name?: string;
          include_adult?: boolean;
          username?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Grab the following account states for a session:
   *
   * - TV show rating
   * - If it belongs to your watchlist
   * - If it belongs to your favourite list
   */
  'GET_tv-tv_id-account_states': {
    parameters: {
      path: {
        tv_id: number;
      };
      query: {
        guest_session_id?: parameters['trait:sessionOrGuestSession:guest_session_id'];
        session_id?: parameters['trait:sessionOrGuestSession:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          favorite?: boolean;
          rated?: unknown;
          watchlist?: boolean;
        };
      };
      401: responses['trait:sessionErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of the translations that exist for a TV show. */
  'GET_tv-tv_id-translations': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          translations?: {
            iso_3166_1?: string;
            iso_639_1?: string;
            name?: string;
            english_name?: string;
            data?: {
              name?: string;
              overview?: string;
              homepage?: string;
            };
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the rated TV shows for a guest session. */
  'GET_guest_session-guest_session_id-rated-tv': {
    parameters: {
      path: {
        guest_session_id: string;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-with-rating-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Retrieve the details of a movie or TV show review.
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | November 14, 2020 | A `author_details` field has been added to the default response, which includes an `avatar_path` and `rating` value. |
   */
  'GET_review-review_id': {
    parameters: {
      path: {
        review_id: string;
      };
    };
    responses: {
      200: {
        schema: {
          id?: string;
          author?: string;
          author_details?: {
            name?: string;
            username?: string;
            avatar_path?: string;
            rating?: number;
          };
          content?: string;
          created_at?: string;
          iso_639_1?: string;
          media_id?: number;
          media_title?: string;
          media_type?: string;
          updated_at?: string;
          url?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the aggregate credits for TV season.
   *
   * This call differs from the main `credits` call in that it does not only return the season credits, but rather is a view of all the cast & crew for all of the episodes belonging to a season.
   */
  'GET_tv-tv_id-season-season_number-aggregate_credits': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          cast?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
            roles?: {
              credit_id?: string;
              character?: string;
              episode_count?: number;
            }[];
            total_episode_count?: number;
            order?: number;
          }[];
          crew?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
            jobs?: {
              credit_id?: string;
              job?: string;
              episode_count?: number;
            }[];
            department?: string;
            total_episode_count?: number;
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get a companies logos by id.
   *
   * There are two image formats that are supported for companies, PNG's and SVG's. You can see which type the original file is by looking at the `file_type` field. We prefer SVG's as they are resolution independent and as such, the width and height are only there to reflect the original asset that was uploaded. An SVG can be scaled properly beyond those dimensions if you call them as a PNG.
   *
   * For more information about how SVG's and PNG's can be used, take a read through [this document](#docTextSection:mXP9B2uzoDJFguDZv).
   */
  'GET_company-company_id-images': {
    parameters: {
      path: {
        company_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          logos?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            id?: string;
            /** @enum {string} */
            file_type?: '.svg' | '.png';
            vote_average?: number;
            vote_count?: number;
            width?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Rate a movie.
   *
   * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
   */
  'POST_movie-movie_id-rating': {
    parameters: {
      path: {
        movie_id: number;
      };
      body: {
        body?: {
          /** @description This is the value of the rating you want to submit. The value is expected to be between 0.5 and 10.0. */
          value: number;
        };
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
      query: {
        guest_session_id?: parameters['trait:sessionOrGuestSession:guest_session_id'];
        session_id?: parameters['trait:sessionOrGuestSession:session_id'];
      };
    };
    responses: {
      201: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:sessionErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Remove your rating for a movie.
   *
   * A valid session or guest session ID is required. You can read more about how this works [here](#docTextSection:NSZtgz7zptsiLYxXZ).
   */
  'DELETE_movie-movie_id-rating': {
    parameters: {
      path: {
        movie_id: number;
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
      query: {
        guest_session_id?: parameters['trait:sessionOrGuestSession:guest_session_id'];
        session_id?: parameters['trait:sessionOrGuestSession:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:sessionErrors:401'];
    };
  };
  /**
   * Get the videos that have been added to a TV show.
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
   * | March 23, 2019 | Vimeo was added as a video source. |
   * | March 20, 2019 | "Behind the Scenes" and "Bloopers" were added as valid video types. |
   */
  'GET_tv-tv_id-videos': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            iso_639_1?: string;
            iso_3166_1?: string;
            name?: string;
            key?: string;
            site?: string;
            size?: number;
            type?: string;
            official?: boolean;
            published_at?: string;
            id?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the list of your favorite TV shows. */
  'GET_account-account_id-favorite-tv': {
    parameters: {
      path: {
        account_id: number;
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Add a movie or TV show to your watchlist. */
  'POST_account-account_id-watchlist': {
    parameters: {
      path: {
        account_id: number;
      };
      body: {
        body?: {
          /** @enum {string} */
          media_type: 'movie' | 'tv';
          media_id: number;
          watchlist: boolean;
        };
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      201: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get a list of movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.
   *
   * You can optionally specify a `region` prameter which will narrow the search to only look for theatrical release dates within the specified country.
   */
  'GET_movie-now_playing': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-object'][];
          dates?: {
            /** Format: date */
            maximum?: string;
            /** Format: date */
            minimum?: string;
          };
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the TV show credits for a person.
   *
   * You can query for some extra details about the credit with the [credit method](#endpoint:xPWdEBLkvCNZSicLN).
   */
  'GET_person-person_id-tv_credits': {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          cast?: {
            credit_id?: string;
            original_name?: string;
            id?: number;
            genre_ids?: number[];
            character?: string;
            name?: string;
            poster_path?: definitions['image-path'];
            vote_count?: number;
            vote_average?: number;
            popularity?: number;
            episode_count?: number;
            original_language?: string;
            first_air_date?: string;
            backdrop_path?: definitions['image-path'];
            overview?: string;
            origin_country?: string[];
          }[];
          crew?: {
            id?: number;
            department?: string;
            original_language?: string;
            episode_count?: number;
            job?: string;
            overview?: string;
            origin_country?: string[];
            original_name?: string;
            genre_ids?: number[];
            name?: string;
            first_air_date?: string;
            backdrop_path?: definitions['image-path'];
            popularity?: number;
            vote_count?: number;
            vote_average?: number;
            poster_path?: definitions['image-path'];
            credit_id?: string;
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the credits for TV season. */
  'GET_tv-tv_id-season-season_number-translations': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          translations?: {
            iso_3166_1?: string;
            iso_639_1?: string;
            name?: string;
            english_name?: string;
            data?: {
              name?: string;
              overview?: string;
            };
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the external ids for a TV season. We currently support the following external sources.
   *
   * | **Media Databases** |
   * | ------------------- |
   * | TVDB ID             |
   * | Freebase MID*       |
   * | Freebase ID*        |
   * | TVRage ID*          |
   *
   * *Defunct or no longer available as a service.
   */
  'GET_tv-tv_id-season-season_number-external_ids': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          freebase_mid?: unknown;
          freebase_id?: unknown;
          tvdb_id?: unknown;
          tvrage_id?: unknown;
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Search for a TV show. */
  'GET_search-tv': {
    parameters: {
      query: {
        first_air_date_year?: number;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-object'][];
          total_results?: number;
          total_pages?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the cast and crew for a movie. */
  'GET_movie-movie_id-credits': {
    parameters: {
      path: {
        movie_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          cast?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
            cast_id?: number;
            character?: string;
            credit_id?: string;
            order?: number;
          }[];
          crew?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
            credit_id?: string;
            department?: string;
            job?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of translations that have been created for a person. */
  'GET_person-person_id-translations': {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          translations?: {
            iso_639_1?: string;
            iso_3166_1?: string;
            name?: string;
            data?: {
              biography?: string;
            };
            english_name?: string;
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the movies that belong to a keyword.
   *
   * We **highly recommend** using [movie discover](#endpoint:p5NyoR7dM842S8G9j) instead of this method as it is much more flexible.
   */
  'GET_keyword-keyword_id-movies': {
    parameters: {
      path: {
        keyword_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          page?: number;
          results?: definitions['movie-list-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the changes for a movie. By default only the last 24 hours are returned.
   *
   * You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
   */
  'GET_movie-movie_id-changes': {
    parameters: {
      path: {
        movie_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          changes?: {
            key?: string;
            items?: {
              id?: string;
              action?: string;
              time?: string;
              iso_639_1?: string;
              value?: string;
              original_value?: string;
            }[];
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Returns all of the alternative titles for a TV show. */
  'GET_tv-tv_id-alternative_titles': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            title?: string;
            iso_3166_1?: string;
            type?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of all the TV shows you have rated. */
  'GET_account-account_id-rated-tv': {
    parameters: {
      path: {
        account_id: number;
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-with-rating-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Grab the following account states for a session:
   *
   * - Movie rating
   * - If it belongs to your watchlist
   * - If it belongs to your favourite list
   */
  'GET_movie-movie_id-account_states': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        session_id?: parameters['trait:sessionOrGuestSession:session_id'];
        guest_session_id?: parameters['trait:sessionOrGuestSession:guest_session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          favorite?: boolean;
          rated?: unknown;
          watchlist?: boolean;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the alternative names of a company. */
  'GET_company-company_id-alternative_names': {
    parameters: {
      path: {
        company_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            name?: string;
            type?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get a list of all of the TV show ids that have been changed in the past 24 hours.
   *
   * You can query it for up to 14 days worth of changed IDs at a time with the `start_date` and `end_date` query parameters. 100 items are returned per page.
   */
  'GET_tv-changes': {
    responses: {
      200: {
        schema: {
          results?: {
            id?: number;
            adult?: unknown;
          }[];
          page?: number;
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the changes for a TV season. By default only the last 24 hours are returned.
   *
   * You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
   */
  'GET_tv-season-season_id-changes': {
    parameters: {
      path: {
        season_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          changes?: {
            key?: string;
            items?: {
              id?: string;
              action?: string;
              time?: string;
              value?: {
                episode_id?: number;
                episode_number?: number;
              };
              iso_639_1?: string;
              original_value?: string;
            }[];
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the list of languages (ISO 639-1 tags) used throughout TMDB. */
  'GET_configuration-languages': {
    parameters: {
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          iso_639_1?: string;
          english_name?: string;
          name?: string;
        }[];
      };
    };
  };
  /** Get a list of recommended movies for a movie. */
  'GET_movie-movie_id-recommendations': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** You can use this method to check if a movie has already been added to the list. */
  'GET_list-list_id-item_status': {
    parameters: {
      path: {
        list_id: string;
      };
      query: {
        movie_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: string;
          item_present?: boolean;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Returns a list of the watch provider (OTT/streaming) data we have available for movies. You can specify a `watch_region` param if you want to further filter the list by country. */
  'GET_watch-providers-movie': {
    parameters: {
      query: {
        /** Use the ISO-3166-1 code to filter the providers that are available in a particular country. */
        watch_region?: string;
      };
    };
    responses: {
      200: {
        schema: {
          results?: {
            display_priority?: number;
            logo_path?: string;
            provider_name?: string;
            provider_id?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Create a temporary request token that can be used to validate a TMDB user login. More details about how this works can be found [here](#docTextSection:NSZtgz7zptsiLYxXZ). */
  'GET_authentication-token-new': {
    responses: {
      200: {
        schema: {
          success?: boolean;
          expires_at?: string;
          request_token?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Returns a list of all of the countries we have watch provider (OTT/streaming) data for. */
  'GET_watch-providers-regions': {
    responses: {
      200: {
        schema: {
          results?: {
            iso_3166_1?: string;
            english_name?: string;
            native_name?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the release date along with the certification for a movie.
   *
   * Release dates support different types:
   *
   * 1. Premiere
   * 2. Theatrical (limited)
   * 3. Theatrical
   * 4. Digital
   * 5. Physical
   * 6. TV
   */
  'GET_movie-movie_id-release_dates': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            iso_3166_1?: string;
            release_dates?: {
              certification?: string;
              iso_639_1?: string;
              release_date?: string;
              type?: number;
              note?: string;
            }[];
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the list of TV show recommendations for this item. */
  'GET_tv-tv_id-recommendations': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the most newly created TV show. This is a live response and will continuously change. */
  'GET_tv-latest': {
    responses: {
      200: {
        schema: {
          backdrop_path?: definitions['image-path'];
          created_by?: {[key: string]: unknown}[];
          episode_run_time?: number[];
          first_air_date?: string;
          genres?: {
            id?: number;
            name?: string;
          }[];
          homepage?: string;
          id?: number;
          in_production?: boolean;
          languages?: string[];
          last_air_date?: string;
          name?: string;
          networks?: {
            id?: number;
            name?: string;
          }[];
          number_of_episodes?: number;
          number_of_seasons?: number;
          origin_country?: string[];
          original_language?: string;
          original_name?: string;
          overview?: unknown;
          popularity?: number;
          poster_path?: definitions['image-path'];
          production_companies?: {[key: string]: unknown}[];
          seasons?: {
            air_date?: string;
            episode_count?: number;
            id?: number;
            poster_path?: definitions['image-path'];
            season_number?: number;
          }[];
          status?: string;
          type?: string;
          vote_average?: number;
          vote_count?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the videos that have been added to a TV season.
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | July 28, 2021 | A new `include_video_language` filter is now available. You can use this filter the same way you use `include_image_language` on image calls. We also added two new fields, `official` and `published_at` to the video response. |
   * | March 23, 2019 | Vimeo was added as a video source. |
   * | March 20, 2019 | "Behind the Scenes" and "Bloopers" and "Recap" were added as valid video types. |
   */
  'GET_tv-tv_id-season-season_number-videos': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            iso_639_1?: string;
            iso_3166_1?: string;
            name?: string;
            key?: string;
            site?: string;
            size?: number;
            type?: string;
            official?: boolean;
            published_at?: string;
            id?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the primary TV show details by id.
   *
   * Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | November 20, 2020 | A `watch/providers` method has been added to show what providers (eg. streaming) are available and where.|
   * | November 14, 2020 | The `tagline` has been added to the default response, and is also available as part of the translations method. |
   * | July 17, 2018 | We now return `last_episode_to_air` and `next_episode_to_air` fields. |
   * | March 12, 2018 | Networks return proper logos and we introduced SVG support. |
   * | March 8, 2018 | The `seasons` field now returns the translated names and overviews. |
   */
  'GET_tv-tv_id': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          backdrop_path?: definitions['image-path'];
          created_by?: {
            id?: number;
            credit_id?: string;
            name?: string;
            gender?: number;
            profile_path?: definitions['image-path'];
          }[];
          episode_run_time?: number[];
          first_air_date?: string;
          genres?: {
            id?: number;
            name?: string;
          }[];
          homepage?: string;
          id?: number;
          in_production?: boolean;
          languages?: string[];
          last_air_date?: string;
          last_episode_to_air?: {
            air_date?: string;
            episode_number?: number;
            id?: number;
            name?: string;
            overview?: string;
            production_code?: string;
            season_number?: number;
            still_path?: definitions['image-path'];
            vote_average?: number;
            vote_count?: number;
          };
          name?: string;
          next_episode_to_air?: unknown;
          networks?: {
            name?: string;
            id?: number;
            logo_path?: definitions['image-path'];
            origin_country?: string;
          }[];
          number_of_episodes?: number;
          number_of_seasons?: number;
          origin_country?: string[];
          original_language?: string;
          original_name?: string;
          overview?: string;
          popularity?: number;
          poster_path?: definitions['image-path'];
          production_companies?: {
            id?: number;
            logo_path?: unknown;
            name?: string;
            origin_country?: string;
          }[];
          production_countries?: {
            iso_3166_1?: string;
            name?: string;
          }[];
          seasons?: {
            air_date?: string;
            episode_count?: number;
            id?: number;
            name?: string;
            overview?: string;
            poster_path?: string;
            season_number?: number;
          }[];
          spoken_languages?: {
            english_name?: string;
            iso_639_1?: string;
            name?: string;
          }[];
          status?: string;
          tagline?: string;
          type?: string;
          vote_average?: number;
          vote_count?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the credits (cast, crew and guest stars) for a TV episode. */
  'GET_tv-tv_id-season-season_number-episode-episode_number-credits': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          cast?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
            character?: string;
            credit_id?: string;
            order?: number;
          }[];
          crew?: {
            department?: string;
            job?: string;
            credit_id?: string;
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
          }[];
          guest_stars?: {
            character_name?: string;
            credit_id?: string;
            order?: number;
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the external ids for a person. We currently support the following external sources.
   *
   * | **External Sources** |
   * | ------------     |
   * | IMDB ID          |
   * | Facebook         |
   * | Freebase MID     |
   * | Freebase ID      |
   * | Instagram        |
   * | TVRage ID        |
   * | Twitter          |
   */
  'GET_person-person_id-external_ids': {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          imdb_id?: unknown;
          facebook_id?: unknown;
          freebase_mid?: unknown;
          freebase_id?: unknown;
          tvrage_id?: unknown;
          twitter_id?: unknown;
          id: number;
          instagram_id?: unknown;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the aggregate credits (cast and crew) that have been added to a TV show.
   *
   * This call differs from the main `credits` call in that it does not return the newest season but rather, is a view of all the entire cast & crew for all episodes belonging to a TV show.
   */
  'GET_tv-tv_id-aggregate_credits': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          cast?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
            roles?: {
              credit_id?: string;
              character?: string;
              episode_count?: number;
            }[];
            total_episode_count?: number;
            order?: number;
          }[];
          crew?: {
            adult?: boolean;
            gender?: unknown;
            id?: number;
            known_for_department?: string;
            name?: string;
            original_name?: string;
            popularity?: number;
            profile_path?: definitions['image-path'];
            jobs?: {
              credit_id?: string;
              job?: string;
              episode_count?: number;
            }[];
            department?: string;
            total_episode_count?: number;
          }[];
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the primary information about a movie.
   *
   * Supports `append_to_response`. Read more about this [here](#docTextSection:JdZq8ctmcxNqyLQjp).
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | November 20, 2020 | A `watch/providers` method has been added to show what providers (eg. streaming) are available and where.|
   */
  'GET_movie-movie_id': {
    parameters: {
      path: {
        movie_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          adult?: boolean;
          backdrop_path?: definitions['image-path'];
          belongs_to_collection?: unknown;
          budget?: number;
          genres?: {
            id?: number;
            name?: string;
          }[];
          homepage?: unknown;
          id?: number;
          imdb_id?: unknown;
          original_language?: string;
          original_title?: string;
          overview?: unknown;
          popularity?: number;
          poster_path?: definitions['image-path'];
          production_companies?: {
            name?: string;
            id?: number;
            logo_path?: unknown;
            origin_country?: string;
          }[];
          production_countries?: {
            iso_3166_1?: string;
            name?: string;
          }[];
          /** Format: date */
          release_date?: string;
          revenue?: number;
          runtime?: unknown;
          spoken_languages?: {
            iso_639_1?: string;
            name?: string;
          }[];
          /** @enum {string} */
          status?: 'Rumored' | 'Planned' | 'In Production' | 'Post Production' | 'Released' | 'Canceled';
          tagline?: unknown;
          title?: string;
          video?: boolean;
          vote_average?: number;
          vote_count?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the daily or weekly trending items. The daily trending list tracks items over the period of a day while items have a 24 hour half life. The weekly list tracks items over a 7 day period, with a 7 day half life.
   *
   * #### Valid Media Types
   *
   * | **Media Type** | **Description** |
   * | - | - |
   * | all | Include all movies, TV shows and people in the results as a global trending list. |
   * | movie | Show the trending movies in the results. |
   * | tv | Show the trending TV shows in the results. |
   * | person | Show the trending people in the results. |
   *
   * #### Valid Time Windows
   *
   * | **Time Window** | **Description** |
   * | - | - |
   * | day | View the trending list for the day. |
   * | week | View the trending list for the week. |
   */
  'GET_trending-media_type-time_window': {
    parameters: {
      path: {
        media_type: 'all' | 'movie' | 'tv' | 'person';
        time_window: 'day' | 'week';
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          ''?: definitions['movie-list-object'];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the details of a network.
   *
   * #### Recent Changes
   *
   * | **Date** | **Change** |
   * | - | - |
   * | November 14, 2020 | The `logo_path` has been added to the default response. |
   */
  'GET_network-network_id': {
    parameters: {
      path: {
        network_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          headquarters?: string;
          homepage?: string;
          id?: number;
          logo_path?: definitions['image-path'];
          name?: string;
          origin_country?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the alternative names of a network. */
  'GET_network-network_id-alternative_names': {
    parameters: {
      path: {
        network_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            name?: string;
            type?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the most newly created person. This is a live response and will continuously change. */
  'GET_person-latest': {
    responses: {
      200: {
        schema: {
          adult?: boolean;
          also_known_as?: {[key: string]: unknown}[];
          biography?: unknown;
          birthday?: unknown;
          deathday?: unknown;
          gender?: number;
          homepage?: unknown;
          id?: number;
          imdb_id?: unknown;
          name?: string;
          place_of_birth?: unknown;
          popularity?: number;
          profile_path?: definitions['image-path'];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of seasons or episodes that have been screened in a film festival or theatre. */
  'GET_tv-tv_id-screened_theatrically': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            id?: number;
            episode_number?: number;
            season_number?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of all the TV shows you have added to your watchlist. */
  'GET_account-account_id-watchlist-tv': {
    parameters: {
      path: {
        account_id: number;
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the keywords that have been added to a TV show. */
  'GET_tv-tv_id-keywords': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            id?: number;
            name?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the most newly created movie. This is a live response and will continuously change. */
  'GET_movie-latest': {
    responses: {
      200: {
        schema: {
          adult?: boolean;
          backdrop_path?: definitions['image-path'];
          belongs_to_collection?: unknown;
          budget?: number;
          genres?: {
            id?: number;
            name?: string;
          }[];
          homepage?: string;
          id?: number;
          imdb_id?: string;
          original_language?: string;
          original_title?: string;
          overview?: string;
          popularity?: number;
          poster_path?: definitions['image-path'];
          production_companies?: {[key: string]: unknown}[];
          production_countries?: {[key: string]: unknown}[];
          release_date?: string;
          revenue?: number;
          runtime?: number;
          spoken_languages?: {[key: string]: unknown}[];
          status?: string;
          tagline?: string;
          title?: string;
          video?: boolean;
          vote_average?: number;
          vote_count?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get a list of the _officially_ supported translations on TMDB.
   *
   * While it's technically possible to add a translation in any one of the [languages](#endpoint:tem8QfFFyAfWodrCv) we have added to TMDB (we don't restrict content), the ones listed in this method are the ones we also support for localizing the website with which means they are what we refer to as the "primary" translations.
   *
   * These are all specified as [IETF tags](https://en.wikipedia.org/wiki/IETF_language_tag) to identify the languages we use on TMDB. There is one exception which is image languages. They are currently only designated by a ISO-639-1 tag. This is a planned upgrade for the future.
   *
   * We're always open to adding more if you think one should be added. You can ask about getting a new primary translation added by posting on [the forums](https://www.themoviedb.org/talk/category/5047951f760ee3318900009a).
   *
   * One more thing to mention, these are the translations that map to our website translation project. You can view and contribute to that project [here](https://www.localeapp.com/projects/8267).
   */
  'GET_configuration-primary_translations': {
    parameters: {
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: string[];
      };
    };
  };
  /**
   * Get a list of upcoming movies in theatres. This is a release type query that looks for all movies that have a release type of 2 or 3 within the specified date range.
   *
   * You can optionally specify a `region` prameter which will narrow the search to only look for theatrical release dates within the specified country.
   */
  'GET_movie-upcoming': {
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['movie-list-object'][];
          dates?: {
            maximum?: string;
            minimum?: string;
          };
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the changes for a TV episode. By default only the last 24 hours are returned.
   *
   * You can query up to 14 days in a single query by using the `start_date` and `end_date` query parameters.
   */
  'GET_tv-episode-episode_id-changes': {
    parameters: {
      path: {
        episode_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          changes?: {
            key?: string;
            items?: {
              id?: string;
              action?: string;
              time?: string;
              value?: string;
              iso_639_1?: string;
            }[];
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Powered by our partnership with JustWatch, you can query this method to get a list of the availabilities per country by provider.
   *
   * This is **not** going to return full deep links, but rather, it's just enough information to display what's available where.
   *
   * You can link to the provided TMDB URL to help support TMDB and provide the actual deep links to the content.
   *
   * **Please note**: In order to use this data **you must** attribute the source of the data as JustWatch. If we find any usage not complying with these terms we will revoke access to the API.
   */
  'GET_movie-movie_id-watch-providers': {
    parameters: {
      path: {
        movie_id: number;
      };
      query: {
        api_key?: string;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          results?: {
            AR?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            AT?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            AU?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            BE?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            BR?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            CA?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            CH?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            CL?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            CO?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            CZ?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            DE?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            DK?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            EC?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            EE?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            ES?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            FI?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            FR?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            GB?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            GR?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            HU?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            ID?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            IE?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            IN?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            IT?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            JP?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            KR?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            LT?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            LV?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            MX?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            MY?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            NL?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            NO?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            NZ?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            PE?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            PH?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            PL?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            PT?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            RO?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            RU?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            SE?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            SG?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            TH?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            TR?: {
              link?: string;
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            US?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            VE?: {
              link?: string;
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
            ZA?: {
              link?: string;
              rent?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              buy?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
              flatrate?: {
                display_priority?: number;
                logo_path?: string;
                provider_id?: number;
                provider_name?: string;
              }[];
            };
          };
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the images for a person. */
  'GET_person-person_id-images': {
    parameters: {
      path: {
        person_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          id?: number;
          profiles?: {
            aspect_ratio?: number;
            file_path?: string;
            height?: number;
            iso_639_1?: unknown;
            vote_average?: unknown;
            vote_count?: number;
            width?: number;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * Get the external ids for a TV episode. We currently support the following external sources.
   *
   * | **External Sources** |
   * | -------------------- |
   * | IMDb ID              |
   * | TVDB ID              |
   * | Freebase MID*        |
   * | Freebase ID*         |
   * | TVRage ID*           |
   *
   * *Defunct or no longer available as a service.
   */
  'GET_tv-tv_id-season-season_number-episode-episode_number-external_ids': {
    parameters: {
      path: {
        tv_id: number;
        season_number: number;
        episode_number: number;
      };
    };
    responses: {
      200: {
        schema: {
          imdb_id?: unknown;
          freebase_mid?: unknown;
          freebase_id?: unknown;
          tvdb_id?: unknown;
          tvrage_id?: unknown;
          id?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get all of the lists created by an account. Will invlude private lists if you are the owner. */
  'GET_account-account_id-lists': {
    parameters: {
      path: {
        account_id: number;
      };
      query: {
        api_key?: string;
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: {
            description?: string;
            favorite_count?: number;
            id?: number;
            item_count?: number;
            iso_639_1?: string;
            list_type?: string;
            name?: string;
            poster_path?: unknown;
          }[];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Remove a movie from a list. */
  'POST_list-list_id-remove_item': {
    parameters: {
      path: {
        list_id: string;
      };
      body: {
        body?: {
          media_id: number;
        };
      };
      header: {
        'Content-Type': parameters['trait:jsonContentType:Content-Type'];
      };
      query: {
        session_id: parameters['trait:session:session_id'];
      };
    };
    responses: {
      200: {
        schema: {
          status_code?: number;
          status_message?: string;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /**
   * The find method makes it easy to search for objects in our database by an external id.
   *
   * This method will search all objects (movies, TV shows and people) and return the results in a single response.
   *
   * The supported external sources for each object are as follows.
   *
   * #### Media Databases
   *
   * |              | Movies | TV Shows | TV Seasons | TV Episodes | People |
   * | ------------ | ------ | -------- | ---------- | ----------- | ------ |
   * | IMDb ID      | ✓      | ✓        | ✗          | ✓           | ✓      |
   * | TVDB ID      | ✗      | ✓        | ✓          | ✓           | ✗      |
   * | Freebase MID*| ✗      | ✓        | ✓          | ✓           | ✓      |
   * | Freebase ID* | ✗      | ✓        | ✓          | ✓           | ✓      |
   * | TVRage ID*   | ✗      | ✓        | ✓          | ✓           | ✓      |
   *
   * #### Social IDs
   *
   * |              | Movies | TV Shows | TV Seasons | TV Episodes | People |
   * | ------------ | ------ | -------- | ---------- | ----------- | ------ |
   * | Facebook     | ✓      | ✓        | ✗          | ✗           | ✓      |
   * | Instagram    | ✓      | ✓        | ✗          | ✗           | ✓      |
   * | Twitter      | ✓      | ✓        | ✗          | ✗           | ✓      |
   *
   * *Defunct or no longer available as a service.
   */
  'GET_find-external_id': {
    parameters: {
      path: {
        external_id: string;
      };
      query: {
        external_source:
          | 'imdb_id'
          | 'freebase_mid'
          | 'freebase_id'
          | 'tvdb_id'
          | 'tvrage_id'
          | 'facebook_id'
          | 'twitter_id'
          | 'instagram_id';
      };
    };
    responses: {
      200: {
        schema: {
          movie_results?: definitions['movie-list-object'][];
          person_results?: definitions['person-list-results-object'][];
          tv_results?: definitions['tv-list-result-object'][];
          tv_episode_results?: {[key: string]: unknown}[];
          tv_season_results?: {[key: string]: unknown}[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get the list of official genres for movies. */
  'GET_genre-movie-list': {
    parameters: {
      query: {
        language?: string;
      };
    };
    responses: {
      200: {
        schema: {
          genres?: {
            id?: number;
            name?: string;
          }[];
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
  /** Get a list of similar TV shows. These items are assembled by looking at keywords and genres. */
  'GET_tv-tv_id-similar': {
    parameters: {
      path: {
        tv_id: number;
      };
    };
    responses: {
      200: {
        schema: {
          page?: number;
          results?: definitions['tv-list-result-object'][];
          total_pages?: number;
          total_results?: number;
        };
      };
      401: responses['trait:standardErrors:401'];
      404: responses['trait:standardErrors:404'];
    };
  };
}

export interface external {}
